% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/py-install.R
\name{vrtility_py_require}
\alias{vrtility_py_require}
\alias{set_py_env_vals}
\title{Setup the vrtility Python environment}
\usage{
vrtility_py_require(
  packages = NULL,
  python_version = ">=3.9",
  ...,
  exclude_newer = NULL,
  action = c("add", "remove", "set")
)

set_py_env_vals()
}
\arguments{
\item{packages}{A character vector of Python packages to be available during
the session. These can be simple package names like \code{"jax"} or names with
version constraints like \code{"jax[cpu]>=0.5"}. Pip style syntax for installing
from local files or a git repository is also supported (see details).}

\item{python_version}{A character vector of Python version constraints \cr
(e.g., \code{"3.10"} or \code{">=3.9,<3.13"}).}

\item{...}{Reserved for future extensions; must be empty.}

\item{exclude_newer}{Limit package versions to those published before a
specified date. This offers a lightweight alternative to freezing package
versions, helping guard against Python package updates that break a
workflow. Accepts strings formatted as RFC 3339 timestamps (e.g.,
\code{"2006-12-02T02:07:43Z"}) and local dates in the same format (e.g.,
\code{"2006-12-02"}) in your system's configured time zone. Once \code{exclude_newer}
is set, only the \code{set} action can override it.}

\item{action}{Determines how \code{py_require()} processes the provided
requirements. Options are:
\itemize{
\item \code{add}: Adds the entries to the current set of requirements.
\item \code{remove}: Removes \emph{exact} matches from the requirements list. Requests to remove nonexistent entries are
ignored. For example, if \code{"numpy==2.2.2"} is in the list, passing \code{"numpy"}
with \code{action = "remove"} will not remove it.
\item \code{set}: Clears all existing requirements and replaces them with the
provided ones. Packages and the Python version can be set independently.
}}
}
\value{
Invisible
}
\description{
A very thin wrapper around the \code{reticulate::py_install} function
to set up the necessary python environment and then set some options required
by the vrtility package.
environment

set_py_env_vals sets the environment variables required by the
vrtility package - typically not required.
}
\details{
set_py_env_vals is only required if you are running reticulate::py_env in
some non-standard way. In general it is a lot easier to  use #
vrtility_py_require which will automatically set the necessary options.
}
