[{"path":"https://permian-global-research.github.io/vrtility/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to vrtility","title":"Contributing to vrtility","text":"outlines propose change vrtility.","code":""},{"path":"https://permian-global-research.github.io/vrtility/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to vrtility","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://permian-global-research.github.io/vrtility/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to vrtility","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://permian-global-research.github.io/vrtility/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to vrtility","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"Permian-Global-Research/vrtility\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://permian-global-research.github.io/vrtility/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to vrtility","text":"use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://permian-global-research.github.io/vrtility/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to vrtility","text":"Please note vrtility project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://permian-global-research.github.io/vrtility/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://permian-global-research.github.io/vrtility/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://permian-global-research.github.io/vrtility/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://permian-global-research.github.io/vrtility/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://permian-global-research.github.io/vrtility/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://permian-global-research.github.io/vrtility/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://permian-global-research.github.io/vrtility/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://permian-global-research.github.io/vrtility/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://permian-global-research.github.io/vrtility/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://permian-global-research.github.io/vrtility/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://permian-global-research.github.io/vrtility/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://permian-global-research.github.io/vrtility/articles/Digital-Earth-Africa-GeoMAD.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting started","title":"Digital Earth Africa GeoMAD","text":"let’s get . First load vrtility, set number mirai daemons want use (R processes download data parallel) set important environment variables allow access Digital Earth Africa data S3 bucket. Whilst, can provide config options various vrt_x commands, setting means don’t repeat .","code":"library(vrtility)  mirai::daemons(5) #> [1] 5 # Doing this once saves you having to add it to every vrt_x command. Sys.setenv(   AWS_NO_SIGN_REQUEST = \"YES\",   AWS_S3_ENDPOINT = \"s3.af-south-1.amazonaws.com\" )"},{"path":"https://permian-global-research.github.io/vrtility/articles/Digital-Earth-Africa-GeoMAD.html","id":"locating-the-data","dir":"Articles","previous_headings":"","what":"Locating the data","title":"Digital Earth Africa GeoMAD","text":"locate data, need define bounding box. First need bbox lat-long coordinates querying STAC API, can project bounds later. convenience, ’ll use handy function create bounding box WKT point extend certain amount x y directions. location North Madagascar.","code":"bbox <- gdalraster::bbox_from_wkt(   wkt = \"POINT (46.33 -15.9)\",   extend_x = 0.22,   extend_y = 0.2 )"},{"path":"https://permian-global-research.github.io/vrtility/articles/Digital-Earth-Africa-GeoMAD.html","id":"querying-the-data","dir":"Articles","previous_headings":"","what":"Querying the data","title":"Digital Earth Africa GeoMAD","text":"can now query STAC API Landsat 8 9 annual composites 2024. stac_query() function return doc_items object can use build VRT objects. can optionally filtered, shown , don’t need assets (bands).","code":"l8l9_query <- stac_query(   bbox = bbox,   stac_source = \"https://explorer.digitalearth.africa/stac/\",   collection = \"gm_ls8_ls9_annual\",   start_date = \"2024-01-01\",   end_date = \"2024-12-31\" )  # This step is optional - do this if you only want a subset of the assets (bands) l8l9_query <- rstac::assets_select(   l8l9_query,   asset_names = c(\"SR_B2\", \"SR_B3\", \"SR_B4\", \"SR_B5\") ) print(l8l9_query) #> ###Items #> - matched feature(s): 2 #> - features (2 item(s) / 0 not fetched): #>   - 6d21f993-74bc-52d3-bafa-96164e7bce86 #>   - cb7d0c9d-bc36-538b-a67d-930999cbf3c9 #> - assets: SR_B2, SR_B3, SR_B4, SR_B5 #> - item's fields:  #> assets, bbox, collection, geometry, id, links, properties, stac_extensions, stac_version, type"},{"path":"https://permian-global-research.github.io/vrtility/articles/Digital-Earth-Africa-GeoMAD.html","id":"collecting-the-data","dir":"Articles","previous_headings":"","what":"Collecting the data","title":"Digital Earth Africa GeoMAD","text":"now can use core vrtiltiy functions collect, reproject align (warp) data using vrt_compute() create single raster file VRT.","code":"l8l9_vrt <- vrt_collect(   l8l9_query )  print(l8l9_vrt) #> → <VRT Collection> #>  #>  VRT SRS:  #> PROJCS[\"WGS 84 / NSIDC EASE-Grid 2.0 Global\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Cylindrical_Equal_Area\"],PARAMETER[\"standard_parallel_1\",30],PARAMETER[\"central_meridian\",0],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"6933\"]] #> Bounding Box: 4416000 -2112000 4512000 -1920000 #> Pixel res: 30, 30 #> Start Date: 2024-01-01 UTC #> End Date: 2024-01-01 UTC #> Number of Items: 2 #> Assets: SR_B2, SR_B3, SR_B4, SR_B5 # if you just want to look at one of the tiles... # plot(l8l9_vrt[[1]][[2]], c(3, 2, 1))  bbox_proj <- bbox_to_projected(bbox, l8l9_vrt$srs)  l8l9_vrt_warped <- vrt_warp(   l8l9_vrt,   t_srs = attr(bbox_proj, \"wkt\"),   te = bbox_proj,   tr = c(30, 30) ) |>   vrt_stack()   l8l9file <- vrt_compute(   l8l9_vrt_warped,   outfile = fs::file_temp(ext = \"tif\"),   engine = \"gdalraster\" )"},{"path":"https://permian-global-research.github.io/vrtility/articles/Digital-Earth-Africa-GeoMAD.html","id":"plotting-the-data","dir":"Articles","previous_headings":"","what":"Plotting the data","title":"Digital Earth Africa GeoMAD","text":"Let’s look data true colour false colour.","code":"withr::with_par(list(mar = c(0, 0, 0, 0)), {   plot_raster_src(     l8l9file,     bands = c(3, 2, 1),     axes = FALSE   )    plot_raster_src(     l8l9file,     bands = c(4, 3, 2),     axes = FALSE   ) })"},{"path":"https://permian-global-research.github.io/vrtility/articles/HLS.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Harmonized Landsat Sentinel-2","text":"Harmonized Landsat Sentinel-2 (HLS) project fantastic dataset offering global, harmonized surface reflectance data Landsat 8 Sentinel-2 satellites. combined measurement enables global observations land every 2–3 days 30-meter (m) spatial resolution. data high quality cloud/shadow bitmask layer, enabling creation excellent cloud-free composites. information HLS can found following links: https://hls.gsfc.nasa.gov/ https://lpdaac.usgs.gov/products/hlsl30v002/ https://github.com/nasa/HLS-Data-Resources?tab=readme-ov-file Combining Harmonized landsat sentinel collections require additional work two collections different numbers bands different names. Vignette outlines workflow combine two collections single median composite image maintains available bands. need Earthdata account access HLS data. can create account https://urs.earthdata.nasa.gov/users/new.","code":""},{"path":"https://permian-global-research.github.io/vrtility/articles/HLS.html","id":"workflow-setup","dir":"Articles","previous_headings":"","what":"Workflow setup","title":"Harmonized Landsat Sentinel-2","text":"First load vrtility package set multiprocessing daemons using mirai package. Using mirai daemons allows automated speed several vrtility processing steps. Next define area interest, using gdalraster package can easily simply provide numeric vector (length 4) lon/lat coordinates ordered xmin, ymin, xmax, ymax. working raster data often convenient use projected coordinate system. bbox_to_projected function provides convenient way reproject bounding box, either specific spatial reference system (SRS) using default SRS appropriate area interest. default SRS equal area projection centered around centroid bounding box. Now need find data. need query HLS Landsat Sentinel-2 collections. hls_stac_query function provides convenient way . First query HLS Landsat collection. set maximum cloud cover 35% date range 2023-01-01 2023-12-31. can see total 70 images, 6 less 35% cloud cover. now query HLS Sentinel-2 collection using parameters. can see < 10% images less 35% cloud cover. order download data need set Earthdata credentials. simplest way earthdatalogin package. , using asynchronous mirai daemons, need set credentials daemons. Now can begin forming VRT pipeline. “collect” assets STAC collections. essentially just list virtual rasters. can take little time due VRT validation - however, GDAL caching makes re-accessing remote files faster, subsequent parts workflow. print method vrt_collection objects gives us high level overview imagery download. collections contain images two different SRS. can also see number bands differs across two collections. Now need align data can composite imagery one go. can simply adding nodata bands required. case HLS Landsat collection, also need move position cirrus band match HLS Sentinel-2 collection. Similarly, HLS Sentinel-2, need add thermal bands absent, critically, note need specify scale value bands. isn’t provided scale first band used (case 0.0001) scale, ignored. Automating tricky miss appropriate scale, see warnings use vrt_stack. Now can combine two collections single collection using c method. simple concatenation two collections. Now set mask function required HLS data. “Fmask” band true bitmask (unlike datasets may use ineger masks). Therefore must use build_bitmask function set mask can specify bits wish set -data across bands. Now want “reduce” imagery collection single composite image. typical approach use band-level median can achieve easily first creating virtual warped raster collection using vrt_warp stacking warped collection using vrt_stack. can now apply python median pixel function using vrt_set_py_pixelfun computing final composite using vrt_compute. However, can also create composites using advanced statistical methods can improve filtering outliers, increase scene consistency ensure spectral properties preserved. Several functions provided vrtility package user can also provide desired. use geomedian function calculates geometric (aka spatial median). synthetic statistic ensures consistency across bands. Note can also use functions medoid quantoid, geomedoid obtain different types composite preserve spectral properties data. theory can also just run: NASA Earthdata server seems object multiple concurrent reads single file can bit slow. Therefore can download multiple files parallel using “warp” engine vrt_compute(). downloads files locally - can build geomedian composite . warping vrt_compute step can align images collection spatial reference system, extent pixel size. particularly important case multiple SRS values collection. note recollect = TRUE set ensure returned object vrt_collection object, FALSE multiple file paths returned instead. Now let’s take look composite - first RGB false colour composite.  bands :","code":"library(vrtility)  mirai::daemons(machine_cores()) #> [1] 20 bbox <- gdalraster::bbox_from_wkt(   wkt = \"POINT (144.3 -7.6)\",   extend_x = 0.17,   extend_y = 0.125 )  te <- bbox_to_projected(bbox) trs <- attr(te, \"wkt\") hlssl_stac <- hls_stac_query(   bbox = bbox,   start_date = \"2023-01-01\",   end_date = \"2023-12-31\",   max_cloud_cover = 35,   collection = \"HLSL30_2.0\" ) print(hlssl_stac) #> ###Items #> - matched feature(s): 70 #> - features (6 item(s) / 64 not fetched): #>   - HLS.L30.T55MBM.2023017T003226.v2.0 #>   - HLS.L30.T54MZS.2023017T003226.v2.0 #>   - HLS.L30.T55MBM.2023065T003210.v2.0 #>   - HLS.L30.T54MZS.2023065T003210.v2.0 #>   - HLS.L30.T55MBM.2023337T003219.v2.0 #>   - HLS.L30.T54MZS.2023337T003219.v2.0 #> - assets: B01, B02, B03, B04, B05, B06, B07, B09, B10, B11, Fmask #> - item's fields:  #> assets, bbox, collection, geometry, id, links, properties, stac_extensions, stac_version, type hlsss_stac <- hls_stac_query(   bbox = bbox,   start_date = \"2023-01-01\",   end_date = \"2023-12-31\",   max_cloud_cover = 35,   collection = \"HLSS30_2.0\" ) print(hlsss_stac) #> ###Items #> - matched feature(s): 98 #> - features (8 item(s) / 90 not fetched): #>   - HLS.S30.T54MZS.2023029T004701.v2.0 #>   - HLS.S30.T55MBM.2023074T004709.v2.0 #>   - HLS.S30.T55MBM.2023079T004701.v2.0 #>   - HLS.S30.T55MBM.2023109T004701.v2.0 #>   - HLS.S30.T54MZS.2023109T004701.v2.0 #>   - HLS.S30.T55MBM.2023319T004701.v2.0 #>   - HLS.S30.T55MBM.2023364T004709.v2.0 #>   - HLS.S30.T54MZS.2023364T004709.v2.0 #> - assets:  #> B01, B02, B03, B04, B05, B06, B07, B08, B09, B10, B11, B12, B8A, Fmask #> - item's fields:  #> assets, bbox, collection, geometry, id, links, properties, stac_extensions, stac_version, type mirai::everywhere(   earthdatalogin::edl_netrc(     username = Sys.getenv(\"EARTHDATA_USER\"),     password = Sys.getenv(\"EARTHDATA_PASSWORD\")   ) ) hls_sl_col <- vrt_collect(hlssl_stac) print(hls_sl_col) #> → <VRT Collection> #>  #>  VRT SRS:  #> PROJCS[\"WGS 84 / UTM zone 55N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",147],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32655\"]] #>  #>  PROJCS[\"WGS 84 / UTM zone 54N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",141],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32654\"]] #> Bounding Box: NA #> Pixel res: 30, 30 #> Start Date: 2023-01-17 00:32:26 UTC #> End Date: 2023-12-03 00:32:19 UTC #> Number of Items: 6 #> Assets: B01, B02, B03, B04, B05, B06, B07, B09, B10, B11, Fmask hls_ss_col <- vrt_collect(hlsss_stac) print(hls_ss_col) #> → <VRT Collection> #>  #>  VRT SRS:  #> PROJCS[\"WGS 84 / UTM zone 54N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",141],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32654\"]] #>  #>  PROJCS[\"WGS 84 / UTM zone 55N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",147],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32655\"]] #> Bounding Box: NA #> Pixel res: 30, 30 #> Start Date: 2023-01-29 00:49:07 UTC #> End Date: 2023-12-30 00:49:10 UTC #> Number of Items: 8 #> Assets: B01, B02, B03, B04, B05, B06, B07, B08, B8A, B09, B10, B11, B12, Fmask hls_ls_align <- vrt_set_band_names(   hls_sl_col,   c(\"A\", \"B\", \"G\", \"R\", \"N2\", \"S1\", \"S2\", \"C\", \"T1\", \"T2\", \"Fmask\") ) |>   vrt_add_empty_band(after = 4, description = \"RE1\") |>   vrt_add_empty_band(after = 5, description = \"RE2\") |>   vrt_add_empty_band(after = 6, description = \"RE3\") |>   vrt_add_empty_band(after = 7, description = \"N\") |>   vrt_add_empty_band(after = 9, description = \"WV\") |>   vrt_move_band(band_idx = 13, after = 10)    hls_ss_align <- vrt_set_band_names(   hls_ss_col,   c(\"A\", \"B\", \"G\", \"R\", \"RE1\", \"RE2\", \"RE3\", \"N\", \"N2\", \"WV\", \"C\", \"S1\", \"S2\", \"Fmask\") ) |>   vrt_add_empty_band(after = 13, description = \"T1\", scale_value = 0.01) |>   vrt_add_empty_band(after = 14, description = \"T2\", scale_value = 0.01) hls_merge_coll <- c(   hls_ls_align,   hls_ss_align ) hls_col_mask <- vrt_set_maskfun(   hls_merge_coll,   mask_band = \"Fmask\",   mask_values = c(0, 1, 2, 3),   build_mask_pixfun = build_bitmask(),   drop_mask_band = TRUE )  # let's check out a vrt and inspect the mask function that we used. print(hls_col_mask, maskfun = TRUE) #> → <VRT Collection> #> Mask Function: #> import numpy as np #> def build_bitmask(in_ar, out_ar, xoff, yoff, xsize, ysize, raster_xsize, #>                   raster_ysize, buf_radius, gt, **kwargs): #>     bit_positions = [int(x) for x in kwargs['mask_values'].decode().split(',')] #>     mask = np.zeros_like(in_ar[0], dtype=bool) #>     for bit in bit_positions: #>         mask |= np.bitwise_and(in_ar[0], np.left_shift(1, bit)) > 0 #>     out_ar[:] = np.where(mask, 0, 1) #>  #>  #>  VRT SRS:  #> PROJCS[\"WGS 84 / UTM zone 55N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",147],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32655\"]] #>  #>  PROJCS[\"WGS 84 / UTM zone 54N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",141],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32654\"]] #> Bounding Box: NA #> Pixel res: 30, 30 #> Start Date: 2023-01-17 00:32:26 UTC #> End Date: 2023-12-30 00:49:10 UTC #> Number of Items: 14 #> Assets: A, B, G, R, RE1, RE2, RE3, N, N2, WV, C, S1, S2, T1, T2 # not run band_level_median <- vrt_warp(   hls_col_mask,   t_srs = trs,   te = te,   tr = c(30, 30),   resampling = \"bilinear\" ) |>   vrt_stack() |>   vrt_set_py_pixelfun(pixfun = median_numpy()) |>   vrt_compute(fs::file_temp(ext = \".tif\"),     engine = \"gdalraster\"   ) # not run hls_composite <- vrt_warp(   hls_col_mask,   t_srs = trs,   te = te,   tr = c(30, 30),   resampling = \"bilinear\" ) |>   multiband_reduce(reduce_fun = geomedian()) hls_composite <- hls_col_mask |>   vrt_compute(     fs::file_temp(ext = \".tif\"),     t_srs = trs,     te = te,     tr = c(30, 30),     resampling = \"bilinear\",     engine = \"warp\",     recollect = TRUE   ) |>   multiband_reduce(reduce_fun = geomedian()) withr::with_par(list(mar = c(0, 0, 0, 0)), {   plot_raster_src(     hls_composite,     bands = c(4, 3, 2),     axes = FALSE   )    plot_raster_src(     hls_composite,     bands = c(9, 12, 13),     minmax_pct_cut = c(28, 97),     axes = FALSE   ) }) withr::with_par(   list(mfrow = c(5, 3), mar = c(0, 0, 1, 0)),   purrr::walk(1:15, function(i) {     plot_raster_src(       hls_composite,       bands = i,       pal = hcl.colors(256, \"Rocket\"),       legend = FALSE,       axes = FALSE     )   }) )"},{"path":"https://permian-global-research.github.io/vrtility/articles/cdse-sentinel-2.html","id":"authentication-","dir":"Articles","previous_headings":"","what":"Authentication.","title":"Copernicus Data Space Ecosystem Sentinel-2","text":"Get official authentication documentation . need CDSE account access data. Get one . , ’re registred, navigate S3 credentials page create “access key” “secret access key”. Save keys .Renviron file CDSE_ACCESS_KEY CDSE_SECRET_KEY respectively.","code":""},{"path":"https://permian-global-research.github.io/vrtility/articles/cdse-sentinel-2.html","id":"set-up-the-environment","dir":"Articles","previous_headings":"","what":"Set up the environment","title":"Copernicus Data Space Ecosystem Sentinel-2","text":"first need load vrtility set parallel processing. must set 4 daemons, limit concurrent requests CDSE API. need setup GDAL environment variables. details significance variables see GDAL vsis3 documentation.","code":"library(vrtility)  # only use 4 daemons! mirai::daemons(4) #> [1] 4 Sys.setenv(   AWS_VIRTUAL_HOSTING = \"FALSE\",   AWS_ACCESS_KEY_ID = Sys.getenv(\"CDSE_ACCESS_KEY\"),   AWS_SECRET_ACCESS_KEY = Sys.getenv(\"CDSE_SECRET_KEY\"),   AWS_S3_ENDPOINT = \"eodata.dataspace.copernicus.eu\" )"},{"path":"https://permian-global-research.github.io/vrtility/articles/cdse-sentinel-2.html","id":"query-the-stac-api","dir":"Articles","previous_headings":"","what":"Query the STAC API","title":"Copernicus Data Space Ecosystem Sentinel-2","text":"can now query STAC API Sentinel-2 data. looking level-2A data orthorectified bottom--atmosphere reflectance. define bounding bounding box (located Assam, India) using {gdalraster} convenience also create copy local projection system - ’ll use later warp data common projection. ’ll query data month June 2025, select bands want download (’re grabbing, blue, green, red, near-infrared scene classification layer), finally filter results include images maximum cloud cover 30%.","code":"bbox <- gdalraster::bbox_from_wkt(   wkt = \"POINT (95.415 27.78)\",   extend_x = 0.3,   extend_y = 0.2 ) bbx_proj <- bbox_to_projected(bbox)  # run the STAC query s2copdse <- stac_query(   bbox = bbox,   stac_source = \"https://stac.dataspace.copernicus.eu/v1\",   collection = \"sentinel-2-l2a\",   start_date = \"2025-06-01\",   end_date = \"2025-06-30\" ) |>   rstac::assets_select(     asset_names = c(\"B02_10m\", \"B03_10m\", \"B04_10m\", \"B08_10m\", \"SCL_20m\")   ) |>   stac_cloud_filter(max_cloud_cover = 30)"},{"path":"https://permian-global-research.github.io/vrtility/articles/cdse-sentinel-2.html","id":"download-and-create-a-cloud-free-median-composite","dir":"Articles","previous_headings":"","what":"Download and create a “cloud-free” median composite","title":"Copernicus Data Space Ecosystem Sentinel-2","text":"Now STAC query, can create vrt_collection object encapsulates image assets VRT datasets. need add crucial metadata VRT files including nodata values, scale offset values. Next apply mask data using scene classification layer (SCL) remove cloudy pixels. isn’t perfect mask good start (come future). create collection virtually warped VRTs, aligned common spatial reference system (SRS) resolution. done using vrt_warp function specify target SRS, extent data target resolution. next step requires us stack collection (essentially combining band across epochs), can set pixel function calculate median value pixel across stack. Finally, compute median composite using vrt_compute function, writes output file. use gdalraster engine process data parallel across bands image tiles.","code":"# Download the data and process s2_median <- vrt_collect(s2copdse) |>   vrt_move_band(1, 5) |>   vrt_set_nodata(0, band_idx = 1:4) |>   vrt_set_scale(scale_value = 0.0001, offset_value = -0.1) |>   vrt_set_maskfun(     mask_band = \"SCL_20m\",     mask_values = c(0, 1, 2, 3, 8, 9, 10, 11),     drop_mask_band = TRUE   ) |>   vrt_warp(     t_srs = attr(bbx_proj, \"wkt\"),     te = bbx_proj,     tr = c(10, 10)   ) |>   vrt_stack() |>   vrt_set_py_pixelfun(median_numpy()) |>   vrt_compute(     outfile = fs::file_temp(ext = \"tif\"),     engine = \"gdalraster\"   )"},{"path":"https://permian-global-research.github.io/vrtility/articles/cdse-sentinel-2.html","id":"visualise-the-results","dir":"Articles","previous_headings":"","what":"Visualise the results","title":"Copernicus Data Space Ecosystem Sentinel-2","text":"Finally, let’s plot NIR band RGB composite.","code":"plot_raster_src(s2_median, bands = 4) plot_raster_src(s2_median, bands = c(3, 2, 1))"},{"path":"https://permian-global-research.github.io/vrtility/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hugh Graham. Author, maintainer.","code":""},{"path":"https://permian-global-research.github.io/vrtility/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Graham H (2025). vrtility: R package efficient raster processing using GDAL VRTs. R package version 0.0.8.7, https://permian-global-research.github.io/vrtility/.","code":"@Manual{,   title = {vrtility: R package for efficient raster processing using GDAL VRTs},   author = {Hugh Graham},   year = {2025},   note = {R package version 0.0.8.7},   url = {https://permian-global-research.github.io/vrtility/}, }"},{"path":"https://permian-global-research.github.io/vrtility/index.html","id":"vrtility-","dir":"","previous_headings":"","what":"R package for efficient raster processing using GDAL VRTs","title":"R package for efficient raster processing using GDAL VRTs","text":"vrtility R package aims make best use GDAL’s VRT capabilities efficient processing large raster datasets - mainly Earth Observation (EO) mind. vrtility uses VRT format access awesome features pixel functions also harnesses VRT data structure facilitate complex image processing tasks multi-band compositing time series filtering. [!CAUTION] package active development likely change. Contributions suggestions still welcome!","code":""},{"path":"https://permian-global-research.github.io/vrtility/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"R package for efficient raster processing using GDAL VRTs","text":"Modular design: ’re basically creating remote sensing pipelines using nested VRTs. allows easy addition new pixel masking functions. easily adapted deriving spectral indices calculating complex time series functions. powered {gdalraster}. vrtility enables use GDAL VRT python built-pixel functions. python numpy-based pixel functions can used apply cloud masks summarise pixel values (e.g. median) multiple images (.e create composite image). python environment package management handled {reticulate}. Built-GDAL pixel functions vary depending GDAL version, highly performant - recent GDAL versions even support expressions complex operations. Efficient parallel processing using {mirai} Advanced compositing methods maintain spectral consistency, geometric median medoid. Time series filtering functions improve temporal consistency reduce noise. --fly cloud mask filtering using pixel functions. Ability use OmniCloudMask cloud/shadow masking, embedded within vrt pipeline. (currently experimental)","code":""},{"path":"https://permian-global-research.github.io/vrtility/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R package for efficient raster processing using GDAL VRTs","text":"can install vrtility GitHub :","code":"# install.packages(\"pak\") pak::pkg_install(\"Permian-Global-Research/vrtility\")"},{"path":"https://permian-global-research.github.io/vrtility/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"R package for efficient raster processing using GDAL VRTs","text":"simple example : Define bounding box search STAC catalog Sentinel-2 data Create vrt_collection object - essentially list individual VRTs (making one image) refer vrt_blocks package. , apply mask using pixel functions. simply modifies XML VRT “blocks”. set images one common spatial reference system (SRS) warp vrt_blocks new spatially-aligned vrt_collection using vrt_warp, giving us vrt_collection_warped object. images “stacked” (combined single VRT multiple layers VRTRasterBand), giving us vrt_stack object. median pixel function added vrt_stack. Finally, calculate median composite using gdalraster engine write output , combination mirai package processes data parallel across bands image tiles.","code":"library(vrtility)  #  Set up asynchronous workers to parallelise vrt_collect and vrt_set_maskfun mirai::daemons(6) #> [1] 6 bbox <- gdalraster::bbox_from_wkt(   wkt = \"POINT (144.3 -7.6)\",   extend_x = 0.17,   extend_y = 0.125 )  te <- bbox_to_projected(bbox) trs <- attr(te, \"wkt\")  s2_stac <- sentinel2_stac_query(   bbox = bbox,   start_date = \"2023-01-01\",   end_date = \"2023-12-31\",   max_cloud_cover = 20,   assets = c(\"B02\", \"B03\", \"B04\", \"SCL\") ) # number of items: length(s2_stac$features) #> [1] 3 system.time({   median_composite <- vrt_collect(s2_stac) |>     vrt_set_maskfun(       mask_band = \"SCL\",       mask_values = c(0, 1, 2, 3, 8, 9, 10, 11)     ) |>     vrt_warp(t_srs = trs, te = te, tr = c(10, 10)) |>     vrt_stack() |>     vrt_set_py_pixelfun(pixfun = median_numpy()) |>     vrt_compute(       outfile = fs::file_temp(ext = \"tif\"),       engine = \"gdalraster\"     ) }) #>    user  system elapsed  #>  15.341   0.380  17.368 plot_raster_src(   median_composite,   c(3, 2, 1) )"},{"path":"https://permian-global-research.github.io/vrtility/index.html","id":"asynchronous-downloadprocessing","dir":"","previous_headings":"","what":"Asynchronous download/processing","title":"R package for efficient raster processing using GDAL VRTs","text":"{vrtility} uses {mirai}, alongside {purrr} manage asynchronous parallelisation. setting mirai::daemons(n) running vrt pipeline, can sometimes improve performance, depending speed server holding data. cases make little difference; example, Microsoft Planetary Computer STAC API already pretty fast. However, NASA’s Earthdata STAC API, can make huge difference. order use asynchronous processing, vrt_compute function, need set engine = \"gdalraster\" can use engine = \"warp\" downloading multiple images individually (much faster approach Nasa’s Earthdata server).","code":""},{"path":"https://permian-global-research.github.io/vrtility/index.html","id":"using-on-disk-rasters","dir":"","previous_headings":"","what":"Using on-disk rasters","title":"R package for efficient raster processing using GDAL VRTs","text":"can also use -disk raster files (indeed urls) , shown example dataset - note inputs multiple spatial reference systems therefore need warp (example) “stacking”. can plot vrt_{x} objects using plot() note , large rasters, computing pixel functions, can slow better using vrt_compute write disk plotting output. example, create medoid composite warped collection. Using medoid multi-band pixel functions (e.g. geomedian) can extremely powerful requires compute power/time band-wise pixel functions.","code":"s2files <- fs::dir_ls(system.file(\"s2-data\", package = \"vrtility\"))[1:4]  ex_collect <- vrt_collect(s2files)  ex_collect_mask <- vrt_set_maskfun(   ex_collect,   mask_band = \"SCL\",   mask_values = c(0, 1, 2, 3, 8, 9, 10, 11), )  withr::with_par(   list(mfrow = c(2, 2)),   {     purrr::walk(       seq_len(ex_collect$n_items),       ~ plot(ex_collect, item = .x, bands = c(3, 2, 1))     )      purrr::walk(       seq_len(ex_collect_mask$n_items),       ~ plot(ex_collect_mask, item = .x, bands = c(3, 2, 1))     )   } ) # extract a block to use as a template for warping t_block <- ex_collect[[1]][[4]]  ex_composite <- vrt_warp(   ex_collect_mask,   t_srs = t_block$srs,   te = t_block$bbox,   tr = c(20, 20) ) |>   multiband_reduce(reduce_fun = medoid())   plot_raster_src(ex_composite, bands = c(3, 2, 1))"},{"path":"https://permian-global-research.github.io/vrtility/reference/build_vrt_block.html","id":null,"dir":"Reference","previous_headings":"","what":"constructor for vrt_block class — build_vrt_block","title":"constructor for vrt_block class — build_vrt_block","text":"constructor vrt_block class","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/build_vrt_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"constructor for vrt_block class — build_vrt_block","text":"","code":"build_vrt_block(x, maskfun = NULL, pixfun = NULL, warped = FALSE, ...)"},{"path":"https://permian-global-research.github.io/vrtility/reference/build_vrt_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"constructor for vrt_block class — build_vrt_block","text":"x xml_document object maskfun function mask function pixfun function pixel function warped logical indicating whether VRT warped ... Additional arguments used","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/gdal_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Create GDAL configuration options. — gdal_config_opts","title":"Create GDAL configuration options. — gdal_config_opts","text":"Create GDAL configuration options. Create GDAL creation options Create GDAL warp options Set GDAL configuration options","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/gdal_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create GDAL configuration options. — gdal_config_opts","text":"","code":"gdal_config_opts(   VSI_CACHE = \"TRUE\",   VSI_CACHE_SIZE = \"268435456\",   GDAL_NUM_THREADS = \"ALL_CPUS\",   GDAL_DISABLE_READDIR_ON_OPEN = \"FALSE\",   CPL_VSIL_CURL_CACHE_SIZE = \"1342177280\",   GDAL_HTTP_MAX_RETRY = \"3\",   GDAL_HTTP_RETRY_DELAY = \"5\",   GDAL_HTTP_MULTIPLEX = \"YES\",   GDAL_HTTP_VERSION = \"2\",   GDAL_HTTP_MERGE_CONSECUTIVE_RANGES = \"YES\",   GDAL_HTTP_COOKIEFILE = \"~/.cookies.txt\",   GDAL_HTTP_COOKIEJAR = GDAL_HTTP_COOKIEFILE,   GDAL_MAX_DATASET_POOL_SIZE = NULL,   GDAL_INGESTED_BYTES_AT_OPEN = NULL,   CPL_VSIL_CURL_ALLOWED_EXTENSIONS = NULL,   CPL_VSIL_CURL_USE_HEAD = NULL,   CPL_VSIL_CURL_CHUNK_SIZE = NULL,   ... )  gdal_creation_options(   output_format = NULL,   COMPRESS = \"LZW\",   PREDICTOR = \"2\",   NUM_THREADS =     as.character(ceiling(vrtility::machine_cores()/pmax(vrtility::n_daemons(), 1))),   BIGTIFF = \"IF_NEEDED\",   TILED = \"YES\",   BLOCKXSIZE = \"128\",   BLOCKYSIZE = \"128\",   COPY_SRC_OVERVIEWS = \"YES\",   ... )  gdalwarp_options(   multi = FALSE,   warp_memory = \"50%\",   num_threads =     as.character(ceiling(vrtility::machine_cores()/pmax(vrtility::n_daemons(), 1))),   unified_src_nodata = c(\"NO\", \"YES\", \"PARTIAL\") )  set_gdal_config(x, scope = c(\"gdalraster\", \"sys\"))"},{"path":"https://permian-global-research.github.io/vrtility/reference/gdal_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create GDAL configuration options. — gdal_config_opts","text":"VSI_CACHE Virtual File System (VSI) cache used? VSI_CACHE_SIZE Size VSI cache bytes. GDAL_NUM_THREADS Number threads use processing. Default number available cores divided number daemons. GDAL_DISABLE_READDIR_ON_OPEN Disable directory listing open? CPL_VSIL_CURL_CACHE_SIZE Cache size HTTP requests. GDAL_HTTP_MAX_RETRY Maximum number retries HTTP requests. GDAL_HTTP_RETRY_DELAY Delay retries seconds. GDAL_HTTP_MULTIPLEX Use HTTP multiplexing? GDAL_HTTP_VERSION HTTP version use. GDAL_HTTP_MERGE_CONSECUTIVE_RANGES Merge consecutive ranges HTTP requests? GDAL_HTTP_COOKIEFILE Path cookie file HTTP requests. GDAL_HTTP_COOKIEJAR Path cookie jar HTTP requests. GDAL_MAX_DATASET_POOL_SIZE Maximum size dataset pool. GDAL_INGESTED_BYTES_AT_OPEN Number bytes read open. CPL_VSIL_CURL_ALLOWED_EXTENSIONS Allowed file extensions HTTP requests. CPL_VSIL_CURL_USE_HEAD Use HTTP HEAD requests? CPL_VSIL_CURL_CHUNK_SIZE Chunk size HTTP requests. ... Additional -co options set output_format Output format equivalent -CLI. see details COMPRESS Compression method PREDICTOR Prediction method NUM_THREADS Number threads BIGTIFF Use BigTIFF TILED Use tiling BLOCKXSIZE Block size X BLOCKYSIZE Block size Y COPY_SRC_OVERVIEWS Copy source overviews multi Logical indicating whether use multi-threading, equivalent -multi CLI warp_memory Memory use warping equivalent -wm CLI num_threads Number threads use warping equivalent -wo NUM_THREADS CLI. \"ALL_CPUS\" (default) use available CPUs, alternartively integer can supplied - NULL use single threaded process. unified_src_nodata Unified source nodata option equivalent -wo UNIFIED_SRC_NODATA CLI. Can \"\", \"YES\" \"PARTIAL\". Default \"\" (deafault earlier versions GDAL). x named character vector configuration options scope character vector scope set options . Either \"gdalraster\" \"sys\".","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/gdal_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create GDAL configuration options. — gdal_config_opts","text":"Character vector options","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/gdal_options.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create GDAL configuration options. — gdal_config_opts","text":"named argument set NULL, default GDAL value used. arguments currently included NULL theory improve performance , limited testing either negative impact performance. output_format, equaivalent -gdaltranslate gdalwarp CLIs. NULL, output format inferred file extension.","code":""},{"path":[]},{"path":"https://permian-global-research.github.io/vrtility/reference/gdal_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create GDAL configuration options. — gdal_config_opts","text":"","code":"gdal_config_opts(GDAL_HTTP_USERPWD = \"user:password\") #>                          VSI_CACHE                     VSI_CACHE_SIZE  #>                             \"TRUE\"                        \"268435456\"  #>                   GDAL_NUM_THREADS       GDAL_DISABLE_READDIR_ON_OPEN  #>                         \"ALL_CPUS\"                            \"FALSE\"  #>           CPL_VSIL_CURL_CACHE_SIZE                GDAL_HTTP_MAX_RETRY  #>                       \"1342177280\"                                \"3\"  #>              GDAL_HTTP_RETRY_DELAY                GDAL_HTTP_MULTIPLEX  #>                                \"5\"                              \"YES\"  #>                  GDAL_HTTP_VERSION GDAL_HTTP_MERGE_CONSECUTIVE_RANGES  #>                                \"2\"                              \"YES\"  #>               GDAL_HTTP_COOKIEFILE                GDAL_HTTP_COOKIEJAR  #>                   \"~/.cookies.txt\"                   \"~/.cookies.txt\"  #>                  GDAL_HTTP_USERPWD  #>                    \"user:password\"  gdal_creation_options(COMPRESS = \"JPEG\", JPEG_QUALITY = \"90\") #> [1] \"COMPRESS=JPEG\"          \"PREDICTOR=2\"            \"NUM_THREADS=4\"          #> [4] \"BIGTIFF=IF_NEEDED\"      \"TILED=YES\"              \"BLOCKXSIZE=128\"         #> [7] \"BLOCKYSIZE=128\"         \"COPY_SRC_OVERVIEWS=YES\" \"JPEG_QUALITY=90\"        gdalwarp_options(multi = TRUE, warp_memory = \"50%\", num_threads = 4) #> [1] \"-multi\"                \"-wm\"                   \"50%\"                   #> [4] \"-wo\"                   \"NUM_THREADS=4\"         \"-wo\"                   #> [7] \"UNIFIED_SRC_NODATA=NO\" set_gdal_config(gdal_config_opts())"},{"path":"https://permian-global-research.github.io/vrtility/reference/mirai-mgmt.html","id":null,"dir":"Reference","previous_headings":"","what":"Mirai Daemon Management — n_daemons","title":"Mirai Daemon Management — n_daemons","text":"Just helpful functions managing mirai daemons parallel processing.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/mirai-mgmt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mirai Daemon Management — n_daemons","text":"","code":"n_daemons()  machine_cores(all.tests = FALSE, logical = TRUE)"},{"path":"https://permian-global-research.github.io/vrtility/reference/mirai-mgmt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mirai Daemon Management — n_daemons","text":".tests Logical: true apply known tests. logical Logical: possible, use number physical CPUs/cores (FALSE) logical CPUs (TRUE). Currently honoured macOS, Solaris Windows.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/mirai-mgmt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mirai Daemon Management — n_daemons","text":"n_daemons() returns number mirai daemons running. machine_cores() returns number cores machine. function detectCores used detect number cores machine.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/multiband_reduce.html","id":null,"dir":"Reference","previous_headings":"","what":"Image composite reductions that require all bands. — multiband_reduce","title":"Image composite reductions that require all bands. — multiband_reduce","text":"multiband_reduce can used create composite reductions require band values, tyhe geometric median medoid. composite warped VRT collection.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/multiband_reduce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Image composite reductions that require all bands. — multiband_reduce","text":"","code":"multiband_reduce(   x,   reduce_fun,   outfile,   config_options,   creation_options,   quiet,   nsplits,   recollect )  geomedian(   weizfeld = FALSE,   nitermax = 100,   nstart = 10,   gamma = 10,   alpha = 0.65,   epsilon = 1e-08,   impute_na = TRUE )  medoid(   distance_type = c(\"euclidean\", \"manhattan\", \"minimum\", \"maximum\", \"minkowski\",     \"bhattacharyya\", \"hellinger\", \"kullback_leibler\", \"jensen_shannon\", \"canberra\",     \"chi_square\", \"soergel\", \"sorensen\", \"cosine\", \"wave_hedges\", \"motyka\",     \"harmonic_mean\", \"jeffries_matusita\", \"gower\", \"kulczynski\", \"itakura_saito\"),   impute_na = TRUE )  quantoid(   distance_type = c(\"euclidean\", \"manhattan\", \"minimum\", \"maximum\", \"minkowski\",     \"bhattacharyya\", \"hellinger\", \"kullback_leibler\", \"jensen_shannon\", \"canberra\",     \"chi_square\", \"soergel\", \"sorensen\", \"cosine\", \"wave_hedges\", \"motyka\",     \"harmonic_mean\", \"jeffries_matusita\", \"gower\", \"kulczynski\", \"itakura_saito\"),   probability = 0.4,   impute_na = TRUE )  geomedoid(   distance_type = c(\"euclidean\", \"manhattan\", \"minimum\", \"maximum\", \"minkowski\",     \"bhattacharyya\", \"hellinger\", \"kullback_leibler\", \"jensen_shannon\", \"canberra\",     \"chi_square\", \"soergel\", \"sorensen\", \"cosine\", \"wave_hedges\", \"motyka\",     \"harmonic_mean\", \"jeffries_matusita\", \"gower\", \"kulczynski\", \"itakura_saito\"),   nstart = 5,   gamma = 10,   alpha = 0.65,   epsilon = 1e-08,   impute_na = TRUE )"},{"path":"https://permian-global-research.github.io/vrtility/reference/multiband_reduce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Image composite reductions that require all bands. — multiband_reduce","text":"x vrt_collection_warped object. reduce_fun function apply data. function take single argument, matrix columns represent bands cell within raster stack rows represent time series cell. function return vector length number bands. See  details. outfile output file path. config_options named character vector GDAL configuration options. creation_options named character vector GDAL creation options. quiet Logical indicating whether suppress progress bar. nsplits number splits use tiling. NULL, function automatically determine number splits based dimensions input data, available memory number active mirai daemons. see details recollect logical indicating whether return output vrt_block vrt_collection object. default FALSE output character string output file path. weizfeld Logical. TRUE, Weiszfeld algorithm used calculate geometric median - see Weiszfeld. FALSE (default), Gmedian algorithm used, see Gmedian. Gmedian algorithm faster intrinsically handles missing values. nitermax Maximum number iterations. default set 100. used weizfeld = TRUE. nstart Number times algorithm ran data set. used weizfeld = FALSE. gamma Value (positive) constant controling descent steps see details Gmedian. used weizfeld = FALSE. alpha Rate decrease descent steps (see details). satisfy \\(1/2< alpha <= 1\\). used weizfeld = FALSE. epsilon Numerical tolerance. defaut set 1e-08. impute_na Logical. TRUE, missing values replaced appropriate band-level statistic - case geomedian relevant weizfeld = TRUE - case Gmedian algorithm used estimate bands NA values.  medoid column/band median used; quantoid requested quantile probabilioty column. FALSE, missing values replaced. may result NA values output multiple bands. distance_type type distance metric use. See dista full description options. probability probability quantile use. Default 0.4.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/multiband_reduce.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Image composite reductions that require all bands. — multiband_reduce","text":"character vector output file path.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/multiband_reduce.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Image composite reductions that require all bands. — multiband_reduce","text":"lot TODO: info reduce_fun options nsplits etc... geomedian enables use Gmedian Weiszfeld calculate geometric median multiband raster. Weiszfeld set FALSE, Gmedian used. Gmedian algorithm, matrix column medians used initial values rather first row matrix. medoid function  uses dista compute distance band-level medians values pixel. selects pixel minimum distance medoid. returned band pixel values spectrally consistent observed rather synthetic. quantoid equivalent medoid uses specified quantile value calculating distances. geomedoid function combines geomedian medoid - first calculates geometric median across bands uses determine nearest pixel value geometric median. geometric median greater resilience outliers band-level median, function may selct medoid value less likely contian clouds outliers. returned band pixel values spectrally consistent.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/multiband_reduce.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Image composite reductions that require all bands. — multiband_reduce","text":"","code":"mirai::daemons(3) #> [1] 3 s2files <- fs::dir_ls(system.file(\"s2-data\", package = \"vrtility\"))  ex_collect <- vrt_collect(s2files)  t_block <- ex_collect[[1]][[1]]  # export each file with mask. coll_masked <- ex_collect |>   vrt_set_maskfun(     mask_band = \"SCL\",     mask_values = c(0, 1, 2, 3, 8, 9, 10, 11)   ) |>   vrt_warp(     t_srs = t_block$srs,     te = t_block$bbox,     tr = t_block$res   )  # create plots of each of the methods to compare. par(mar = c(0, 0, 1, 0)) purrr::iwalk(     list(       geomedian = geomedian(),       medoid = medoid(),       geomedoid = geomedoid(distance_type = \"manhattan\"),       quantoid = quantoid(probability = 0.2)     ),     \\(.x, .y) {       geomed <- multiband_reduce(         coll_masked,         reduce_fun = .x       )        plot_raster_src(         geomed,         c(3, 2, 1),         axes = FALSE,          main = .y       )     }   ) #>"},{"path":"https://permian-global-research.github.io/vrtility/reference/plot_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"plot a raster file or vrt_x object — plot_raster_src","title":"plot a raster file or vrt_x object — plot_raster_src","text":"wrapper around gdalraster::plot_raster simplifies process plotting raster file.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/plot_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot a raster file or vrt_x object — plot_raster_src","text":"","code":"plot_raster_src(   x,   bands = 1,   pal = grDevices::hcl.colors(10, \"Viridis\"),   nbands = length(bands),   title = TRUE,   col_tbl = NULL,   maxColorValue = 1,   normalize = TRUE,   adj_low = 0.8,   minmax_def = NULL,   minmax_pct_cut = NULL,   col_map_fn = if (nbands == 1) {      scales::colour_ramp(pal, alpha = FALSE)  } else {          NULL  },   xlim = NULL,   ylim = NULL,   interpolate = TRUE,   asp = 1,   axes = TRUE,   main = \"\",   xlab = \"\",   ylab = \"\",   xaxs = \"r\",   yaxs = \"r\",   legend = if (nbands == 1) TRUE else FALSE,   digits = 2,   na_col = grDevices::rgb(0, 0, 0, 0),   ... )  # S3 method for class 'vrt_block' plot(x, ..., config_options = gdal_config_opts(), quiet = FALSE)  # S3 method for class 'vrt_stack' plot(x, ..., config_options = gdal_config_opts(), quiet = FALSE)  # S3 method for class 'vrt_stack_warped' plot(x, ..., config_options = gdal_config_opts(), quiet = FALSE)  # S3 method for class 'vrt_collection' plot(x, item, ..., config_options = gdal_config_opts(), quiet = FALSE)"},{"path":"https://permian-global-research.github.io/vrtility/reference/plot_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot a raster file or vrt_x object — plot_raster_src","text":"x path raster file bands numeric vector band numbers plot must length 1 3. pal character vector colors use plotting single band. nbands number bands data. Must either 1 (grayscale) 3 (RGB). RGB, data interleaved band. nbands NULL (default), nbands = 3 assumed input data contain 3 bands, otherwise band 1 used. title logical. TRUE band description used title. ignored main provided. col_tbl color table matrix data frame four five columns. Column 1 contains numeric pixel values. Columns 2:4 contain intensities red, green blue primaries (0:1 default, use integer 0:255 setting maxColorValue = 255). optional column 5 may contain alpha transparency values, 0 fully transparent 1 (maxColorValue) opaque (default column 5 missing). data GDALRaster object, built-color table used automatically one exists dataset. maxColorValue number giving maximum color values range col_tbl (see ). default 1. normalize Logical. TRUE rescale pixel values range [0,1], normalized full range pixel data default (min(data), max(data), per band). Ignored col_tbl used. Set normalize FALSE color map function used operates raw pixel values (see col_map_fn ). adj_low numeric value adjust lower quantile value . useful example sea presents dark. minmax_def Normalize user-defined min/max values (terms pixel data, per band). single-band grayscale, numeric vector length two containing min, max. 3-band RGB, numeric vector length six containing b1_min, b2_min, b3_min, b1_max, b2_max, b3_max. minmax_pct_cut Normalize truncated range pixel data using percentile cutoffs (removes outliers). numeric vector length two giving percentiles use (e.g., c(2, 98)). Applied per band. Ignored minmax_def used. col_map_fn optional color map function (default grDevices::gray single-band data grDevices::rgb 3-band). Ignored col_tbl used. Set normalize FALSE using color map function operates raw pixel values. xlim Numeric vector length two giving x coordinate range. data GDALRaster object, default raster xmin, xmax georeferenced coordinates, otherwise default uses pixel/line coordinates (c(0, xsize)). ylim Numeric vector length two giving y coordinate range. data GDALRaster object, default raster ymin, ymax georeferenced coordinates, otherwise default uses pixel/line coordinates (c(ysize, 0)). interpolate Logical indicating whether apply linear interpolation image drawing (default TRUE). asp Numeric. aspect ratio y/x (see ?plot.window). axes Logical. TRUE draw axes (default). main main title (top). xlab Title x axis (see ?title). ylab Title y axis (see ?title). xaxs style axis interval calculation used x axis (see ?par). yaxs style axis interval calculation used y axis (see ?par). legend Logical indicating whether include legend plot. Currently, legends supported continuous data. color table used one specified raster built-color table, otherwise value col_map_fn used. digits number digits display decimal point legend labels raster data floating point. na_col Color use NA 7- 9-character hexadecimal code. default transparent (\"#00000000\", return value rgb(0,0,0,0)). ... parameters passed plot.default(). config_options named character vector gdal config options set attempting read VRT. quiet Logical indicating whether suppress messages. item numeric index item, vrt_collection, plot","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/set_vrt_descriptions.html","id":null,"dir":"Reference","previous_headings":"","what":"Iternal function to set the descriptions for the bands in a VRT — set_vrt_descriptions","title":"Iternal function to set the descriptions for the bands in a VRT — set_vrt_descriptions","text":"Iternal function set descriptions bands VRT","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/set_vrt_descriptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iternal function to set the descriptions for the bands in a VRT — set_vrt_descriptions","text":"","code":"set_vrt_descriptions(x, descriptions, as_file = FALSE)"},{"path":"https://permian-global-research.github.io/vrtility/reference/set_vrt_descriptions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iternal function to set the descriptions for the bands in a VRT — set_vrt_descriptions","text":"x character string path VRT descriptions character vector descriptions as_file logical indicating VRT saved file","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/set_vrt_descriptions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iternal function to set the descriptions for the bands in a VRT — set_vrt_descriptions","text":"character string path modified VRT","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/set_vrt_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to set metadata in a VRT — set_vrt_metadata","title":"Internal function to set metadata in a VRT — set_vrt_metadata","text":"Internal function set metadata VRT","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/set_vrt_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to set metadata in a VRT — set_vrt_metadata","text":"","code":"set_vrt_metadata(x, keys, values, as_file = FALSE)"},{"path":"https://permian-global-research.github.io/vrtility/reference/set_vrt_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function to set metadata in a VRT — set_vrt_metadata","text":"x character string path VRT keys character vector metadata keys values character vector metadata values as_file logical indicating VRT saved file","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/set_vrt_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function to set metadata in a VRT — set_vrt_metadata","text":"xml_document object","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/singleband-many-to-many.html","id":null,"dir":"Reference","previous_headings":"","what":"Image processing along a time series. — singleband_m2m","title":"Image processing along a time series. — singleband_m2m","text":"singleband_m2m can used filter raster time series' apply smoothing operations. functions work single band time. composite warped VRT collection. hampel_filter used tocreate function filter band-level outliers time-series using Hampel filter. provided singleband_m2m().","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/singleband-many-to-many.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Image processing along a time series. — singleband_m2m","text":"","code":"singleband_m2m(   x,   m2m_fun,   outfile,   config_options,   creation_options,   quiet,   nsplits,   recollect )  hampel_filter(k = 1L, t0 = 3, impute_na = FALSE)"},{"path":"https://permian-global-research.github.io/vrtility/reference/singleband-many-to-many.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Image processing along a time series. — singleband_m2m","text":"x vrt_collection_warped object. m2m_fun function apply data. function take matrix input return matrix output. function vectorized rows matrix, row represents time columns represent pixels. calcualtions done band level. outfile output file path. config_options named character vector GDAL configuration options. creation_options named character vector GDAL creation options. quiet Logical indicating whether suppress progress bar. nsplits number splits use tiling. NULL, function automatically determine number splits based dimensions input data, available memory number active mirai daemons. see details recollect logical indicating whether return output vrt_block vrt_collection object. default FALSE output character string output file path. k number neighboring points consider side current point. window length 2*k+1 indices. t0 threshold, default 3 (Pearson's rule), see . impute_na Logical indicating whether impute NA values. TRUE, function impute NA values using nearest prior non-NA value. FALSE, NA values returned original positions.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/singleband-many-to-many.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Image processing along a time series. — singleband_m2m","text":"character vector output file path. function used singleband_m2m() remove outliers raster time series.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/singleband-many-to-many.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Image processing along a time series. — singleband_m2m","text":"lot TODO: ... (details hampel) ‘median absolute deviation’ computation done (-k...k) vicinity point least k steps away end points interval. lower upper end time series values preserved. high threshold makes filter forgiving, low one declare points outliers. t0<-3 (default) corresponds Ron Pearson's 3 sigma edit rule, t0<-0 John Tukey's median filter. implementation hampel filter based pracma package implemented C++. also handles NA values differently, First, NA values removed data applying filter. impute_na TRUE, function impute NA values using nearest prior non-NA value. impute_na FALSE, NA values returned original positions.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/spatial_helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"Project a lat/long bounding box to a generic projected coordinate system — bbox_to_projected","title":"Project a lat/long bounding box to a generic projected coordinate system — bbox_to_projected","text":"function takes lat/long bounding box projects either prescibed projected coordinate system generic projected coordinate system suitable AOI.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/spatial_helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Project a lat/long bounding box to a generic projected coordinate system — bbox_to_projected","text":"","code":"bbox_to_projected(   x,   proj_specific = NULL,   proj_generic = c(\"laea\", \"aeqd\", \"utm\", \"pconic\", \"eqdc\"),   ellps = \"WGS84\",   no_defs = TRUE,   opts = \"\" )  to_wkt(x)  # Default S3 method to_wkt(x)  # S3 method for class 'numeric' to_wkt(x)  # S3 method for class 'character' to_wkt(x)"},{"path":"https://permian-global-research.github.io/vrtility/reference/spatial_helpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Project a lat/long bounding box to a generic projected coordinate system — bbox_to_projected","text":"x object convert wkt. proj_specific character vector. projection use. PROJ-readable string EPSG code. NULL, generic projection used. proj_generic character vector. projection use. One \"laea\", \"aeqd\", \"utm\", \"pconic\", \"eqdc\". ellps character vector. ellipsoid use. Select sf_proj_info(type = \"ellps\"). no_defs logical. Whether include +no_defs option proj string. opts character vector. Additional proj options pass proj string. see details information.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/spatial_helpers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Project a lat/long bounding box to a generic projected coordinate system — bbox_to_projected","text":"numeric vector length 4 representing projected bounding box new coordinate system. Attributes include new proj4 wkt string. character string object wkt format.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/spatial_helpers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Project a lat/long bounding box to a generic projected coordinate system — bbox_to_projected","text":"info available \"generic\" projects see: utm: https://proj.org/en/9.4/operations/projections/utm.html laea: https://proj.org/en/9.4/operations/projections/laea.html aeqd: https://proj.org/en/9.4/operations/projections/aeqd.html pconic: https://proj.org/en/9.4/operations/projections/pconic.html eqdc: https://proj.org/en/9.4/operations/projections/eqdc.html","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/spatial_helpers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Project a lat/long bounding box to a generic projected coordinate system — bbox_to_projected","text":"","code":"bbox <- gdalraster::bbox_from_wkt(   wkt = \"POINT (144.3 -7.6)\",   extend_x = 0.17,   extend_y = 0.125 )  bbox_to_projected(bbox) #> [1] -18764.54 -13827.92  18764.54  13824.17 #> attr(,\"wkt\") #> [1] \"PROJCS[\\\"unknown\\\",GEOGCS[\\\"unknown\\\",DATUM[\\\"Unknown based on WGS 84 ellipsoid\\\",SPHEROID[\\\"WGS 84\\\",6378137,298.257223563,AUTHORITY[\\\"EPSG\\\",\\\"7030\\\"]]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.0174532925199433,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]]],PROJECTION[\\\"Lambert_Azimuthal_Equal_Area\\\"],PARAMETER[\\\"latitude_of_center\\\",-7.6],PARAMETER[\\\"longitude_of_center\\\",144.3],PARAMETER[\\\"false_easting\\\",0],PARAMETER[\\\"false_northing\\\",0],UNIT[\\\"metre\\\",1,AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],AXIS[\\\"Easting\\\",EAST],AXIS[\\\"Northing\\\",NORTH]]\"  bbox_to_projected(bbox, proj_generic = \"utm\") #> [1]  845317.3 9144543.8  883092.3 9172512.3 #> attr(,\"wkt\") #> [1] \"PROJCS[\\\"unknown\\\",GEOGCS[\\\"unknown\\\",DATUM[\\\"Unknown based on WGS 84 ellipsoid\\\",SPHEROID[\\\"WGS 84\\\",6378137,298.257223563,AUTHORITY[\\\"EPSG\\\",\\\"7030\\\"]]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.0174532925199433,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]]],PROJECTION[\\\"Transverse_Mercator\\\"],PARAMETER[\\\"latitude_of_origin\\\",0],PARAMETER[\\\"central_meridian\\\",141],PARAMETER[\\\"scale_factor\\\",0.9996],PARAMETER[\\\"false_easting\\\",500000],PARAMETER[\\\"false_northing\\\",10000000],UNIT[\\\"metre\\\",1,AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],AXIS[\\\"Easting\\\",EAST],AXIS[\\\"Northing\\\",NORTH]]\"   if (FALSE) { # interactive() bbox_to_projected(  c(-3.56, 50.69, -3.46, 50.75),  proj_specific = \"EPSG:27700\" ) }"},{"path":"https://permian-global-research.github.io/vrtility/reference/stac_utilities.html","id":null,"dir":"Reference","previous_headings":"","what":"Query a STAC source — stac_query","title":"Query a STAC source — stac_query","text":"Query STAC source Sign STAC items retrieved Microsoft Planetary Computer (MPC) Generate Sentinel 2 stac collection doc_imes object Generate Harmonized Landsat Sentinel (HLS) stac collection doc_imes object Filter STAC item collection cloud cover Generate Sentinel 1 stac collection doc_items object","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/stac_utilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query a STAC source — stac_query","text":"","code":"stac_query(bbox, stac_source, collection, start_date, end_date, limit = 999)  sign_planetary_computer(items, subscription_key = Sys.getenv(\"MPC_TOKEN\"))  sentinel2_stac_query(   bbox,   start_date,   end_date,   assets = c(\"B01\", \"B02\", \"B03\", \"B04\", \"B05\", \"B06\", \"B07\", \"B08\", \"B8A\", \"B09\", \"B11\",     \"B12\", \"SCL\"),   max_cloud_cover = 10,   stac_source = \"https://planetarycomputer.microsoft.com/api/stac/v1/\",   collection = \"sentinel-2-l2a\",   mpc_sign = TRUE,   limit = 999 )  hls_stac_query(   bbox,   start_date,   end_date,   assets = c(\"B01\", \"B02\", \"B03\", \"B04\", \"B05\", \"B06\", \"B07\", \"B08\", \"B8A\", \"B09\", \"B10\",     \"B11\", \"B12\", \"Fmask\"),   max_cloud_cover = 10,   stac_source = \"https://cmr.earthdata.nasa.gov/stac/LPCLOUD/\",   collection = c(\"HLSS30_2.0\", \"HLSL30_2.0\"),   limit = 999 )  stac_cloud_filter(items, max_cloud_cover)  sentinel1_stac_query(   bbox,   start_date,   end_date,   assets = c(\"hh\", \"hv\", \"vh\", \"vv\"),   orbit_state = c(\"descending\", \"ascending\"),   stac_source = \"https://planetarycomputer.microsoft.com/api/stac/v1/\",   collection = c(\"sentinel-1-rtc\", \"sentinel-1-grd\"),   mpc_sign = TRUE,   limit = 999 )"},{"path":"https://permian-global-research.github.io/vrtility/reference/stac_utilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query a STAC source — stac_query","text":"bbox numeric vector bounding box (length 4) lat/long stac_source character string STAC source collection character string collection query start_date start date query end_date end date query limit number items return items STACItemCollection subscription_key Optionally (strongly recommended), subscription key associated MPC account. time writing, required downloading Sentinel 1 RTC products, well NAIP imagery. key willb automatically used environment variable MPC_TOKEN set. assets character vector asset names include max_cloud_cover numeric value maximum cloud cover percentage mpc_sign logical indicating whether sign items using Planetary Computer API's signing method (required using Planetary Computer STAC API). orbit_state character vector orbit state filter . arguments allowed however - consider carefully implications retaining orbits intend composite data.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/stac_utilities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query a STAC source — stac_query","text":"list items STACItemCollection object signed assets url. stac_vrt object STACItemCollection","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/stac_utilities.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query a STAC source — stac_query","text":"order access HLS data need NASA Earthdata account. can create one https://urs.earthdata.nasa.gov/users/new. account, can set credentials using earthdatalogin package shown examples.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/stac_utilities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query a STAC source — stac_query","text":"","code":"if (FALSE) { # interactive() s2_its <- stac_query(  bbox = c(-12.386, -37.214, -12.186, -37.014),  stac_source = \"https://planetarycomputer.microsoft.com/api/stac/v1/\",  collection = \"sentinel-2-l2a\",  start_date = \"2023-01-01\",  end_date = \"2023-01-31\",  limit = 10 )  mpc_singed <- sign_planetary_computer(s2_its) } if (FALSE) { # interactive() sentinel2_stac_query(   bbox = c(-12.386, -37.214, -12.186, -37.014),   start_date = \"2023-01-01\",   end_date = \"2023-01-31\",   max_cloud_cover = 10,   assets = c(\"B02\", \"B03\", \"B04\", \"B08\", \"SCL\") ) } if (FALSE) { # interactive() hls_query <- hls_stac_query(   c(144.130, -7.725, 144.470, -7.475),   start_date = \"2023-01-01\",   end_date = \"2023-12-31\",   assets = c(\"B04\", \"B03\", \"B02\", \"Fmask\"),   collection = \"HLSS30_2.0\",   max_cloud_cover = 35 ) # in order to download these items (or call further vrt_x functions) you # will first need to set your credentials. The easiest way to do this is with # the `earthdatalogin` package. First set your EARTHDATA_USER and # EARTHDATA_PASSWORD environment variables and then run the following command:  earthdatalogin::edl_netrc(   username = Sys.getenv(\"EARTHDATA_USER\"),   password = Sys.getenv(\"EARTHDATA_PASSWORD\") ) } if (FALSE) { # interactive() sentinel1_stac_query(   bbox = c(-12.386, -37.214, -12.186, -37.014),   start_date = \"2023-01-01\",   end_date = \"2023-01-31\",   assets = \"vv\" ) }"},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_add_empty_band.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an empty band to a VRT_x object — vrt_add_empty_band","title":"Add an empty band to a VRT_x object — vrt_add_empty_band","text":"Add empty band VRT_x object","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_add_empty_band.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an empty band to a VRT_x object — vrt_add_empty_band","text":"","code":"vrt_add_empty_band(x, after, description, scale_value)"},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_add_empty_band.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an empty band to a VRT_x object — vrt_add_empty_band","text":"x VRT_x object numeric indicating band number add empty band description character string describing empty band scale_value numeric value set scale new band. NULL, scale first band VRT used. careful, Landsat example different scales different bands.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_block_save_internal.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function for saving a vrt block overcoming issues around parallel process temp directories. — vrt_block_save_internal","title":"Internal function for saving a vrt block overcoming issues around parallel process temp directories. — vrt_block_save_internal","text":"Internal function saving vrt block overcoming issues around parallel process temp directories.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_block_save_internal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function for saving a vrt block overcoming issues around parallel process temp directories. — vrt_block_save_internal","text":"","code":"vrt_block_save_internal(x, temp_vrt_dir, apply_scale = TRUE)"},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_cache_management.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the VRT cache directory — vrt_cache_set","title":"Set the VRT cache directory — vrt_cache_set","text":"Set VRT cache directory Destroy VRT cache directory","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_cache_management.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the VRT cache directory — vrt_cache_set","text":"","code":"vrt_cache_set(dir)  vrt_cache_destroy()"},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_cache_management.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the VRT cache directory — vrt_cache_set","text":"dir character string directory set cache","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_cache_management.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the VRT cache directory — vrt_cache_set","text":"character string directory (invisibly)","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_cache_management.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set the VRT cache directory — vrt_cache_set","text":"default cache location tempdir(). function allows set cache location different directory. mainly useful debugging wish interrogate intermediate VRT files. vrtility depends saving many vrt files disk lot files can build cache directory. temporary directory. vrt_cache_destroy helper function destroy VRT cache directory. useful want clear cache directory start fresh. cache directory set tempdir() function warn bad idea proceed.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_collect.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct the base VRT object for composing VRT pipelines. — vrt_collect","title":"Construct the base VRT object for composing VRT pipelines. — vrt_collect","text":"Construct base VRT object composing VRT pipelines.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_collect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct the base VRT object for composing VRT pipelines. — vrt_collect","text":"","code":"vrt_collect(x, config_opts, bands, band_descriptions, datetimes)  # S3 method for class 'character' vrt_collect(   x,   config_opts = gdal_config_opts(),   bands = NULL,   band_descriptions = NULL,   datetimes = rep(\"\", length(x)) )  # S3 method for class 'doc_items' vrt_collect(x, config_opts = gdal_config_opts(), ...)  # S3 method for class 'vrt_collection' print(x, xml = FALSE, pixfun = FALSE, maskfun = FALSE, blocks = FALSE, ...)  # S3 method for class 'vrt_collection' c(x, ...)"},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_collect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct the base VRT object for composing VRT pipelines. — vrt_collect","text":"x object used create vrt_x object see details. config_opts named character vector GDAL configuration options. bands numeric vector band indices include VRT collection band_descriptions character vector band descriptions. datetimes character vector datetimes. ... case c, additional vrt_collection objects concatenate x. Otherwise, additional arguments pass method unused. xml logical indicating whether print XML VRT collection. pixfun logical indicating whether print pixel function. maskfun logical indicating whether print mask function. blocks logical indicating whether print blocks instead collection summary.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_collect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct the base VRT object for composing VRT pipelines. — vrt_collect","text":"vrt_collection object.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_collect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct the base VRT object for composing VRT pipelines. — vrt_collect","text":"main way create vrt_collection object, forms basis vrrt-based pipelines vrtility using doc_items object rstac package. info create doc_items object see stac_query(). build vrt_stack object vrt_collection required first. vrt_collection object essentially list VRT files. stage alignment carried -  rasters virtualised -. state, can apply masks, example summarisation required can use vrt_stack - however, order create stack collection must contain images single spatial reference system (SRS). mutliple SRS values, use vrt_warp() unify projection collection (almost always good idea anyway). can also create VRT collection set files. useful data disk downstream step first processing stac collection. can use c method combine multiple vrt_collection objects. collections must number bands.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_collect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct the base VRT object for composing VRT pipelines. — vrt_collect","text":"","code":"s2files <- fs::dir_ls(system.file(\"s2-data\", package = \"vrtility\")) vrt_collect(s2files) #> → <VRT Collection> #>  #>  VRT SRS:  #> PROJCS[\"unknown\",GEOGCS[\"unknown\",DATUM[\"Unknown based on WGS 84 ellipsoid\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]]],PROJECTION[\"Lambert_Azimuthal_Equal_Area\"],PARAMETER[\"latitude_of_center\",50.72],PARAMETER[\"longitude_of_center\",-3.51],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]] #>  #>  PROJCS[\"WGS 84 / UTM zone 30N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-3],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32630\"]] #>  #>  PROJCS[\"OSGB36 / British National Grid\",GEOGCS[\"OSGB36\",DATUM[\"Ordnance_Survey_of_Great_Britain_1936\",SPHEROID[\"Airy 1830\",6377563.396,299.3249646,AUTHORITY[\"EPSG\",\"7001\"]],AUTHORITY[\"EPSG\",\"6277\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4277\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",49],PARAMETER[\"central_meridian\",-2],PARAMETER[\"scale_factor\",0.9996012717],PARAMETER[\"false_easting\",400000],PARAMETER[\"false_northing\",-100000],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"27700\"]] #>  #>  #> Bounding Box: NA #> Pixel res: 19.9923198093722, 19.9923198093722 #> Start Date: NA #> End Date: NA #> Number of Items: 5 #> Assets: B02, B03, B04, SCL  # we can also combine multiple vrt collections c(vrt_collect(s2files[1:2]), vrt_collect(s2files[3:4])) #> → <VRT Collection> #>  #>  VRT SRS:  #> PROJCS[\"unknown\",GEOGCS[\"unknown\",DATUM[\"Unknown based on WGS 84 ellipsoid\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]]],PROJECTION[\"Lambert_Azimuthal_Equal_Area\"],PARAMETER[\"latitude_of_center\",50.72],PARAMETER[\"longitude_of_center\",-3.51],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]] #>  #>  PROJCS[\"WGS 84 / UTM zone 30N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-3],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32630\"]] #>  #>  #> Bounding Box: NA #> Pixel res: 19.9923198093722, 19.9923198093722 #> Start Date: NA #> End Date: NA #> Number of Items: 4 #> Assets: B02, B03, B04, SCL  if (FALSE) { # interactive() s2q <- sentinel2_stac_query(  bbox = c(-12.386, -37.214, -12.186, -37.014),  start_date = \"2023-01-01\",  end_date = \"2023-01-31\",  max_cloud_cover = 10,  assets = c(\"B02\", \"B03\", \"B04\", \"B08\", \"SCL\") )  vrt_collect(s2q) }"},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_compute.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a composite raster from (virtual) raster sources. — vrt_compute","title":"Generate a composite raster from (virtual) raster sources. — vrt_compute","text":"Generate composite raster (virtual) raster sources.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_compute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a composite raster from (virtual) raster sources. — vrt_compute","text":"","code":"vrt_compute(   x,   outfile,   t_srs,   te,   tr,   resampling,   engine,   warp_options,   creation_options,   config_options,   nsplits,   add_cl_arg,   quiet,   apply_scale,   dst_nodata,   recollect )  # S3 method for class 'vrt_block' vrt_compute(   x,   outfile,   t_srs = x$srs,   te = x$bbox,   tr = x$res,   resampling = c(\"near\", \"bilinear\", \"cubic\", \"cubicspline\", \"lanczos\", \"average\", \"rms\",     \"mode\", \"max\", \"min\", \"med\", \"q1\", \"q3\", \"sum\"),   engine = c(\"warp\", \"gdalraster\", \"translate\"),   warp_options = gdalwarp_options(),   creation_options = gdal_creation_options(),   config_options = gdal_config_opts(),   nsplits = NULL,   add_cl_arg = NULL,   quiet = TRUE,   apply_scale = TRUE,   dst_nodata = NULL,   recollect = FALSE )  # S3 method for class 'vrt_stack_warped' vrt_compute(   x,   outfile,   t_srs = x$srs,   te = x$bbox,   tr = x$res,   resampling = c(\"near\", \"bilinear\", \"cubic\", \"cubicspline\", \"lanczos\", \"average\", \"rms\",     \"mode\", \"max\", \"min\", \"med\", \"q1\", \"q3\", \"sum\"),   engine = c(\"warp\", \"gdalraster\", \"translate\"),   warp_options = gdalwarp_options(),   creation_options = gdal_creation_options(),   config_options = gdal_config_opts(),   nsplits = NULL,   add_cl_arg = NULL,   quiet = TRUE,   apply_scale = TRUE,   dst_nodata = NULL,   recollect = FALSE )  # S3 method for class 'vrt_stack' vrt_compute(   x,   outfile,   t_srs,   te,   tr,   resampling = c(\"near\", \"bilinear\", \"cubic\", \"cubicspline\", \"lanczos\", \"average\", \"rms\",     \"mode\", \"max\", \"min\", \"med\", \"q1\", \"q3\", \"sum\"),   engine = c(\"warp\", \"gdalraster\", \"translate\"),   warp_options = gdalwarp_options(),   creation_options = gdal_creation_options(),   config_options = gdal_config_opts(),   nsplits = NULL,   add_cl_arg = NULL,   quiet = TRUE,   apply_scale = TRUE,   dst_nodata = NULL,   recollect = FALSE )  # S3 method for class 'vrt_collection_warped' vrt_compute(   x,   outfile,   t_srs = x$srs,   te = x$bbox,   tr = x$res,   resampling = c(\"near\", \"bilinear\", \"cubic\", \"cubicspline\", \"lanczos\", \"average\", \"rms\",     \"mode\", \"max\", \"min\", \"med\", \"q1\", \"q3\", \"sum\"),   engine = c(\"warp\", \"gdalraster\", \"translate\"),   warp_options = gdalwarp_options(),   creation_options = gdal_creation_options(),   config_options = gdal_config_opts(),   nsplits = NULL,   add_cl_arg = NULL,   quiet = TRUE,   apply_scale = TRUE,   dst_nodata = NULL,   recollect = FALSE )  # S3 method for class 'vrt_collection' vrt_compute(   x,   outfile,   t_srs,   te,   tr,   resampling = c(\"near\", \"bilinear\", \"cubic\", \"cubicspline\", \"lanczos\", \"average\", \"rms\",     \"mode\", \"max\", \"min\", \"med\", \"q1\", \"q3\", \"sum\"),   engine = c(\"warp\", \"gdalraster\", \"translate\"),   warp_options = gdalwarp_options(),   creation_options = gdal_creation_options(),   config_options = gdal_config_opts(),   nsplits = NULL,   add_cl_arg = NULL,   quiet = TRUE,   apply_scale = TRUE,   dst_nodata = NULL,   recollect = FALSE )"},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_compute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a composite raster from (virtual) raster sources. — vrt_compute","text":"x vrt_block, vrt_stack, vrt_collection object outfile character string output file path t_srs character string target SRS te numeric vector target extent form c(xmin, ymin, xmax, ymax) must SRS t_srs. tr numeric vector target resolution form c(xres, yres) resampling character vector resampling method used. see details. engine character vector engine use processing raster data. See details. warp_options character vector options pass gdalwarp creation_options character vector options pass gdal \"engine\". config_options character vector options set GDAL environment nsplits integer number splits use using gdalraster engine. add_cl_arg character vector additional command line arguments captured gdalwarp_options() - checked validity. quiet logical indicating whether suppress output apply_scale logical indicating whether apply scale values existing file metadata. dst_nodata numeric value nodata value use output raster. NULL, gdal decide. usually required retaining band contains different nodata value others. recollect logical indicating whether return output vrt_block vrt_collection object. default FALSE output character string output file path.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_compute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a composite raster from (virtual) raster sources. — vrt_compute","text":"character string path output raster , recollect TRUE, vrt_block vrt_collection object.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_compute.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a composite raster from (virtual) raster sources. — vrt_compute","text":"resampling default \"near\", chosen vrt_warp already used \"bilinear\" may prefereable input data yet virtually aligned/resampled. choice engine depend nature computation carried . majority cases warping preferred, especically processing entirity input dataset (usually case working online data sources).","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_compute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a composite raster from (virtual) raster sources. — vrt_compute","text":"","code":"s2files <- fs::dir_ls(system.file(\"s2-data\", package = \"vrtility\")) ex_collect <- vrt_collect(s2files)  t_block <- ex_collect[[1]][[1]]  # export each file with mask. coll_masked <- ex_collect |>   vrt_set_maskfun(     mask_band = \"SCL\",     mask_values = c(0, 1, 2, 3, 8, 9, 10, 11)   ) |>   vrt_warp(     t_srs = t_block$srs,     te = t_block$bbox,     tr = t_block$res   )  # save each file with masked values. masked_files <- vrt_compute(   coll_masked,   outfile = fs::file_temp(ext = \"tif\") )  withr::with_par(   list(mfrow = c(2, 2)),   purrr::walk(     masked_files[2:5],     ~ plot_raster_src(.x, bands = c(3, 2, 1))   ) )   basic_mosaic <-   vrt_stack(coll_masked) |>   vrt_compute(     outfile = fs::file_temp(ext = \"tif\")   )  # images laid one on top of the other plot_raster_src(   basic_mosaic,   c(3, 2, 1) )   # now median composite with pixelfunction med_composite <-   vrt_stack(coll_masked) |>   vrt_set_py_pixelfun(pixfun = median_numpy()) |>   vrt_compute(     outfile = fs::file_temp(ext = \"tif\")   )  plot_raster_src(   med_composite,   c(3, 2, 1) )"},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_move_band.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an empty band to a VRT_x object — vrt_move_band","title":"Add an empty band to a VRT_x object — vrt_move_band","text":"Add empty band VRT_x object","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_move_band.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an empty band to a VRT_x object — vrt_move_band","text":"","code":"vrt_move_band(x, band_idx, after, save_dir)"},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_move_band.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an empty band to a VRT_x object — vrt_move_band","text":"x VRT_x object band_idx numeric indicating band number band move. numeric indicating band new band places. Note based initial state band ordering. eg. add 1 moving band forward. save_dir character string indicating directory save modified VRT. Defaults cache directory.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_save.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a vrt_block object to disk — vrt_save","title":"Save a vrt_block object to disk — vrt_save","text":"Save vrt_block object disk","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_save.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a vrt_block object to disk — vrt_save","text":"","code":"vrt_save(x, outfile)"},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_save.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a vrt_block object to disk — vrt_save","text":"x vrt_stack vrt_block object. outfile character string output file","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_set_band_names.html","id":null,"dir":"Reference","previous_headings":"","what":"set the band names for a vrt_x object — vrt_set_band_names","title":"set the band names for a vrt_x object — vrt_set_band_names","text":"set band names vrt_x object","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_set_band_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"set the band names for a vrt_x object — vrt_set_band_names","text":"","code":"vrt_set_band_names(x, band_names)"},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_set_band_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"set the band names for a vrt_x object — vrt_set_band_names","text":"x vrt_block, vrt_stack, vrt_collection object band_names character vector band names","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_set_gdal_pixelfun.html","id":null,"dir":"Reference","previous_headings":"","what":"Set built-in GDAL pixel functions of a VRT stack object — vrt_set_gdal_pixelfun","title":"Set built-in GDAL pixel functions of a VRT stack object — vrt_set_gdal_pixelfun","text":"Set built-GDAL pixel functions VRT stack object","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_set_gdal_pixelfun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set built-in GDAL pixel functions of a VRT stack object — vrt_set_gdal_pixelfun","text":"","code":"vrt_set_gdal_pixelfun(x, pixfun, ..., band_idx, nodata_as_nan)  # S3 method for class 'vrt_block' vrt_set_gdal_pixelfun(x, pixfun, ..., band_idx = NULL, nodata_as_nan = FALSE)  # S3 method for class 'vrt_collection' vrt_set_gdal_pixelfun(x, pixfun, ..., band_idx = NULL, nodata_as_nan = FALSE)"},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_set_gdal_pixelfun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set built-in GDAL pixel functions of a VRT stack object — vrt_set_gdal_pixelfun","text":"x vrt_stack object pixfun built-GDAL pixel function. See details list available functions. ... named arguments used within pixel function see details. band_idx indices bands set pixel function . NULL, pixel function set bands. nodata_as_nan logical indicating NoData value set NaN. Defaults FALSE. Sometimes useful pixel functions ignore NoData value. see https://github.com/OSGeo/gdal/issues/4746. use probably need specify '-srcnodata' option compute.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_set_gdal_pixelfun.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set built-in GDAL pixel functions of a VRT stack object — vrt_set_gdal_pixelfun","text":"documentation GDAL pixel functions can found https://gdal.org/en/stable/drivers/raster/vrt.html#built--pixel-functions pixel function requires arguments, can passed named arguments, line specified naming PixelFunctionArguments table link.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_set_gdal_pixelfun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set built-in GDAL pixel functions of a VRT stack object — vrt_set_gdal_pixelfun","text":"","code":"s2files <- fs::dir_ls(system.file(\"s2-data\", package = \"vrtility\")) ex_collect <- vrt_collect(s2files)  t_block <- ex_collect[[1]][[1]] ex_stack <- ex_collect |>   vrt_set_maskfun(     mask_band = \"SCL\",     mask_values = c(0, 1, 2, 3, 8, 9, 10, 11),     drop_mask_band = TRUE   ) |>   vrt_warp(     t_srs = t_block$srs,     te = t_block$bbox,     tr = t_block$res   ) |>   vrt_stack()  plot(   vrt_set_gdal_pixelfun(     ex_stack,     pixfun = \"min\",     propagateNoData = TRUE   ),   bands = c(3, 2, 1) ) #> ℹ You a plotting a warped raster - this might be okay... #>   But, If this is taking a long time you are probably better #>   off saving the file first with `vrt_compute` and then plotting #>   with `plot_raster_src()`.   plot(   vrt_set_gdal_pixelfun(     ex_stack,     pixfun = \"min\"   ),   bands = c(3, 2, 1) ) #> ℹ You a plotting a warped raster - this might be okay... #>   But, If this is taking a long time you are probably better #>   off saving the file first with `vrt_compute` and then plotting #>   with `plot_raster_src()`."},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_set_maskfun.html","id":null,"dir":"Reference","previous_headings":"","what":"Set mask band of a VRT collection — vrt_set_maskfun","title":"Set mask band of a VRT collection — vrt_set_maskfun","text":"function constructs cloud mask using OmniCloudMask python library. designed used vrt_set_maskfun() function.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_set_maskfun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set mask band of a VRT collection — vrt_set_maskfun","text":"","code":"vrt_set_maskfun(   x,   mask_band,   mask_values,   build_mask_pixfun,   set_mask_pixfun,   drop_mask_band,   cache_dir )  # S3 method for class 'vrt_block' vrt_set_maskfun(   x,   mask_band,   mask_values,   build_mask_pixfun = vrtility::build_intmask(),   set_mask_pixfun = vrtility::set_mask_numpy(),   drop_mask_band = TRUE,   cache_dir = getOption(\"vrt.cache\") )  # S3 method for class 'vrt_collection' vrt_set_maskfun(   x,   mask_band,   mask_values,   build_mask_pixfun = vrtility::build_intmask(),   set_mask_pixfun = vrtility::set_mask_numpy(),   drop_mask_band = TRUE,   cache_dir = getOption(\"vrt.cache\") )  set_mask_numpy()  build_intmask()  build_bitmask()  build_omnicloudmask(   red,   green,   nir,   patch_size = 600,   patch_overlap = 300,   batch_size = 1,   no_data_value = 0,   inference_device = NULL )"},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_set_maskfun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set mask band of a VRT collection — vrt_set_maskfun","text":"x VRT collection mask_band name mask band mask_values numeric vector integer bit values masked. build_mask_pixfun character string Python code build mask. Provided functions include build_intmask() build_bitmask(). See details. set_mask_pixfun character string Python code set mask. Provided functions include set_mask_numpy(). See details. drop_mask_band Logical. TRUE, mask band removed VRT block. cache_dir character string directory use temporary files. general left alone. main purpose manage cache location running asyncronously mirai. red red band index (numeric integer). green green band index (numeric integer). nir near-infrared band index (numeric integer). patch_size size patches use prediction (numeric integer, default: 600). patch_overlap overlap patches (numeric integer, default: 300). batch_size batch size use prediction (numeric integer, default: 1). no_data_value value use data pixels (numeric, default: 0). inference_device device use inference. NULL, function automatically select best available device (character, default: NULL). Options include \"cpu\", \"cuda\", \"mps\", etc. order selection based availability: \"cuda\" > \"mps\" > \"cpu\".","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_set_maskfun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set mask band of a VRT collection — vrt_set_maskfun","text":"VRT block mask band set. VRT collection mask band set. Python function can used pixel function VRT raster. function apply OmniCloudMask model specified bands create cloud mask.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_set_maskfun.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set mask band of a VRT collection — vrt_set_maskfun","text":"build_mask_pixfun function used build mask band. mask band true bitmask bit-wise operations required, build_bitmask() function used. integer-based masking, mask band provided single band integer values, build_intmask() function used. set_mask_pixfun function used apply mask bands. general set_mask_numpy() used, although custom function can provided. set_mask_numpy simply applies given mask values 0 assumed nodata values > 0 (typically 255) contain valid data. provided function set_mask_pixfun argument vrt_set_maskfun(). Alternatively custom function provided , example user wishes buffer mask. build_intmask provides integer mask function can used mask pixels based band containing true integer/numeric values. appropriate Sentinel 2A SCL band, example. build_bitmask provides simple bit-wise mask function can used mask pixels based true bit mask. function used bitwise operations required. e.g. HLS data, \"Fmask\" band requires bitwise operations extract mask values.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_set_maskfun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set mask band of a VRT collection — vrt_set_maskfun","text":"","code":"s2files <- fs::dir_ls(system.file(\"s2-data\", package = \"vrtility\"))  ex_collect <- vrt_collect(s2files) ex_collect |>   vrt_set_maskfun(     mask_band = \"SCL\",     mask_values = c(0, 1, 2, 3, 8, 9, 10, 11),     drop_mask_band = FALSE) #> → <VRT Collection> #> Mask Function: [hidden] #>   run print(x, maskfun = TRUE) to view #>  #>  VRT SRS:  #> PROJCS[\"unknown\",GEOGCS[\"unknown\",DATUM[\"Unknown based on WGS 84 ellipsoid\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]]],PROJECTION[\"Lambert_Azimuthal_Equal_Area\"],PARAMETER[\"latitude_of_center\",50.72],PARAMETER[\"longitude_of_center\",-3.51],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]] #>  #>  PROJCS[\"WGS 84 / UTM zone 30N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-3],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32630\"]] #>  #>  PROJCS[\"OSGB36 / British National Grid\",GEOGCS[\"OSGB36\",DATUM[\"Ordnance_Survey_of_Great_Britain_1936\",SPHEROID[\"Airy 1830\",6377563.396,299.3249646,AUTHORITY[\"EPSG\",\"7001\"]],AUTHORITY[\"EPSG\",\"6277\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4277\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",49],PARAMETER[\"central_meridian\",-2],PARAMETER[\"scale_factor\",0.9996012717],PARAMETER[\"false_easting\",400000],PARAMETER[\"false_northing\",-100000],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"27700\"]] #>  #>  #> Bounding Box: NA #> Pixel res: 19.9923198093722, 19.9923198093722 #> Start Date: NA #> End Date: NA #> Number of Items: 5 #> Assets: B02, B03, B04, SCL"},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_set_nodata.html","id":null,"dir":"Reference","previous_headings":"","what":"Set NoData Value for VRT — vrt_set_nodata","title":"Set NoData Value for VRT — vrt_set_nodata","text":"Set NoData value VRT_x object. information preserved derived VRT GeoTIFF files.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_set_nodata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set NoData Value for VRT — vrt_set_nodata","text":"","code":"vrt_set_nodata(x, nodatavalue, nodata, band_idx)  # S3 method for class 'vrt_block' vrt_set_nodata(x, nodatavalue, nodata = nodatavalue, band_idx = NULL)  # S3 method for class 'vrt_collection' vrt_set_nodata(x, nodatavalue, nodata = nodatavalue, band_idx = NULL)"},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_set_nodata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set NoData Value for VRT — vrt_set_nodata","text":"x VRT_x object nodatavalue numeric value set NoDataValue XML tag VRT_x object. nodata numeric value set NODATA XML tag VRT_x object. defaults nodatavalue. band_idx numeric; target band position(s) set NoData value . NULL, nodatavalue set bands.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_set_nodata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set NoData Value for VRT — vrt_set_nodata","text":"","code":"s2files <- fs::dir_ls(system.file(\"s2-data\", package = \"vrtility\")) ex_collect <- vrt_collect(s2files) ex_nodata <- vrt_set_nodata(   ex_collect,   nodatavalue = 0,   nodata = 0 ) print(ex_nodata[[1]][[1]], xml = TRUE) #> → <VRT Block> #> VRT XML:  #>  #> <?xml version=\"1.0\" encoding=\"UTF-8\"?> #> <VRTDataset rasterXSize=\"354\" rasterYSize=\"334\"> #>   <SRS dataAxisToSRSAxisMapping=\"1,2\">PROJCS[\"unknown\",GEOGCS[\"unknown\",DATUM[\"Unknown based on WGS 84 ellipsoid\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]]],PROJECTION[\"Lambert_Azimuthal_Equal_Area\"],PARAMETER[\"latitude_of_center\",50.72],PARAMETER[\"longitude_of_center\",-3.51],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]<\/SRS> #>   <GeoTransform> -3.5400000000000000e+03,  2.0000000000000000e+01,  0.0000000000000000e+00,  3.3400000000000000e+03,  0.0000000000000000e+00, -2.0000000000000000e+01<\/GeoTransform> #>   <VRTRasterBand dataType=\"UInt16\" band=\"1\"> #>     <ColorInterp>Gray<\/ColorInterp> #>     <ComplexSource> #>       <SourceFilename relativeToVRT=\"0\">/home/runner/work/_temp/Library/vrtility/s2-data/exe_2024-06-02_12-21-19.tif<\/SourceFilename> #>       <SourceBand>1<\/SourceBand> #>       <SourceProperties RasterXSize=\"354\" RasterYSize=\"334\" DataType=\"UInt16\" BlockXSize=\"256\" BlockYSize=\"256\"/> #>       <SrcRect xOff=\"0\" yOff=\"0\" xSize=\"354\" ySize=\"334\"/> #>       <DstRect xOff=\"0\" yOff=\"0\" xSize=\"354\" ySize=\"334\"/> #>       <NODATA>0<\/NODATA> #>     <\/ComplexSource> #>     <Description>B02<\/Description> #>     <NoDataValue>0<\/NoDataValue> #>   <\/VRTRasterBand> #>   <VRTRasterBand dataType=\"UInt16\" band=\"2\"> #>     <ComplexSource> #>       <SourceFilename relativeToVRT=\"0\">/home/runner/work/_temp/Library/vrtility/s2-data/exe_2024-06-02_12-21-19.tif<\/SourceFilename> #>       <SourceBand>2<\/SourceBand> #>       <SourceProperties RasterXSize=\"354\" RasterYSize=\"334\" DataType=\"UInt16\" BlockXSize=\"256\" BlockYSize=\"256\"/> #>       <SrcRect xOff=\"0\" yOff=\"0\" xSize=\"354\" ySize=\"334\"/> #>       <DstRect xOff=\"0\" yOff=\"0\" xSize=\"354\" ySize=\"334\"/> #>       <NODATA>0<\/NODATA> #>     <\/ComplexSource> #>     <Description>B03<\/Description> #>     <NoDataValue>0<\/NoDataValue> #>   <\/VRTRasterBand> #>   <VRTRasterBand dataType=\"UInt16\" band=\"3\"> #>     <ComplexSource> #>       <SourceFilename relativeToVRT=\"0\">/home/runner/work/_temp/Library/vrtility/s2-data/exe_2024-06-02_12-21-19.tif<\/SourceFilename> #>       <SourceBand>3<\/SourceBand> #>       <SourceProperties RasterXSize=\"354\" RasterYSize=\"334\" DataType=\"UInt16\" BlockXSize=\"256\" BlockYSize=\"256\"/> #>       <SrcRect xOff=\"0\" yOff=\"0\" xSize=\"354\" ySize=\"334\"/> #>       <DstRect xOff=\"0\" yOff=\"0\" xSize=\"354\" ySize=\"334\"/> #>       <NODATA>0<\/NODATA> #>     <\/ComplexSource> #>     <Description>B04<\/Description> #>     <NoDataValue>0<\/NoDataValue> #>   <\/VRTRasterBand> #>   <VRTRasterBand dataType=\"UInt16\" band=\"4\"> #>     <ComplexSource> #>       <SourceFilename relativeToVRT=\"0\">/home/runner/work/_temp/Library/vrtility/s2-data/exe_2024-06-02_12-21-19.tif<\/SourceFilename> #>       <SourceBand>4<\/SourceBand> #>       <SourceProperties RasterXSize=\"354\" RasterYSize=\"334\" DataType=\"UInt16\" BlockXSize=\"256\" BlockYSize=\"256\"/> #>       <SrcRect xOff=\"0\" yOff=\"0\" xSize=\"354\" ySize=\"334\"/> #>       <DstRect xOff=\"0\" yOff=\"0\" xSize=\"354\" ySize=\"334\"/> #>       <NODATA>0<\/NODATA> #>     <\/ComplexSource> #>     <Description>SCL<\/Description> #>     <NoDataValue>0<\/NoDataValue> #>   <\/VRTRasterBand> #>   <Metadata> #>     <MDI key=\"datetime\"/> #>   <\/Metadata> #> <\/VRTDataset> #>  #>  #>  #>  VRT SRS:  #> PROJCS[\"unknown\",GEOGCS[\"unknown\",DATUM[\"Unknown based on WGS 84 ellipsoid\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]]],PROJECTION[\"Lambert_Azimuthal_Equal_Area\"],PARAMETER[\"latitude_of_center\",50.72],PARAMETER[\"longitude_of_center\",-3.51],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]] #>  #>  #> Bounding Box: -3540 -3340 3540 3340 #> Pixel res: 20, 20 #> Assets: B02, B03, B04, SCL #> No Data Value(s): 0, 0, 0, 0 #> Date Time: NA"},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_set_py_pixelfun.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the pixel function of a VRT stack object — vrt_set_py_pixelfun","title":"Set the pixel function of a VRT stack object — vrt_set_py_pixelfun","text":"Set pixel function VRT stack object","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_set_py_pixelfun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the pixel function of a VRT stack object — vrt_set_py_pixelfun","text":"","code":"vrt_set_py_pixelfun(x, pixfun, band_idx)  # S3 method for class 'vrt_block' vrt_set_py_pixelfun(x, pixfun = vrtility::median_numpy(), band_idx = NULL)  # S3 method for class 'vrt_collection' vrt_set_py_pixelfun(x, pixfun = vrtility::median_numpy(), band_idx = NULL)  median_numpy()  mean_numpy()  geomean_numpy()  quantile_numpy(q)  mean_db_numpy()"},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_set_py_pixelfun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the pixel function of a VRT stack object — vrt_set_py_pixelfun","text":"x vrt_stack object pixfun function returns Python code pixel function band_idx indices bands set pixel function . NULL, pixel function set bands. q Probability quantile compute. Values must 0 1 inclusive.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_set_py_pixelfun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the pixel function of a VRT stack object — vrt_set_py_pixelfun","text":"character python function character python function","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_set_py_pixelfun.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set the pixel function of a VRT stack object — vrt_set_py_pixelfun","text":"median_numpy pixel function calculates median input arrays, injected VRT file Python function. mean_numpy works way calculates mean.` geomean_numpy pixel function calculates geometric mean input arrays. Use cases present unclear . thoughts references please let know. quantile_numpy pixel function calculates quantile input arrays given probability. useful median fails filter cloudy shadowy images effectively. mean_db_numpy pixel function calculates mean input arrays converts decibels. useful calculating mean radar raw/linear backscatter values, example.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_set_scale.html","id":null,"dir":"Reference","previous_headings":"","what":"set the scale values for a VRT_x object — vrt_set_scale","title":"set the scale values for a VRT_x object — vrt_set_scale","text":"Set Scale XML tag VRT_x object. information preserved derived VRT GeoTIFF files.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_set_scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"set the scale values for a VRT_x object — vrt_set_scale","text":"","code":"vrt_set_scale(x, scale_value, offset_value, band_idx)"},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_set_scale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"set the scale values for a VRT_x object — vrt_set_scale","text":"x VRT_x object scale_value numeric vector length 1 equal number bands VRT_x object. offset_value numeric value set Offset XML tag VRT_x object. Default 0. band_idx numeric; target band position(s) set scale value . NULL, scale_value set bands.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_set_scale.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"set the scale values for a VRT_x object — vrt_set_scale","text":"sets Scale Offset XML tags VRT_x object. useful scaling pixel values VRT_x object. however, little confusing - actual values altered scaling value applied read software. unset scale offset simply set scale= 1 offset = 0.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_set_scale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"set the scale values for a VRT_x object — vrt_set_scale","text":"","code":"s2files <- fs::dir_ls(system.file(\"s2-data\", package = \"vrtility\")) ex_collect <- vrt_collect(s2files) ex_sc1 <- vrt_set_scale(   ex_collect,   scale_value = 1e-4 ) print(ex_sc1[[1]][[1]], xml = TRUE) #> → <VRT Block> #> VRT XML:  #>  #> <?xml version=\"1.0\" encoding=\"UTF-8\"?> #> <VRTDataset rasterXSize=\"354\" rasterYSize=\"334\"> #>   <SRS dataAxisToSRSAxisMapping=\"1,2\">PROJCS[\"unknown\",GEOGCS[\"unknown\",DATUM[\"Unknown based on WGS 84 ellipsoid\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]]],PROJECTION[\"Lambert_Azimuthal_Equal_Area\"],PARAMETER[\"latitude_of_center\",50.72],PARAMETER[\"longitude_of_center\",-3.51],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]<\/SRS> #>   <GeoTransform> -3.5400000000000000e+03,  2.0000000000000000e+01,  0.0000000000000000e+00,  3.3400000000000000e+03,  0.0000000000000000e+00, -2.0000000000000000e+01<\/GeoTransform> #>   <VRTRasterBand dataType=\"UInt16\" band=\"1\"> #>     <NoDataValue>0<\/NoDataValue> #>     <ColorInterp>Gray<\/ColorInterp> #>     <ComplexSource> #>       <SourceFilename relativeToVRT=\"0\">/home/runner/work/_temp/Library/vrtility/s2-data/exe_2024-06-02_12-21-19.tif<\/SourceFilename> #>       <SourceBand>1<\/SourceBand> #>       <SourceProperties RasterXSize=\"354\" RasterYSize=\"334\" DataType=\"UInt16\" BlockXSize=\"256\" BlockYSize=\"256\"/> #>       <SrcRect xOff=\"0\" yOff=\"0\" xSize=\"354\" ySize=\"334\"/> #>       <DstRect xOff=\"0\" yOff=\"0\" xSize=\"354\" ySize=\"334\"/> #>       <NODATA>0<\/NODATA> #>     <\/ComplexSource> #>     <Description>B02<\/Description> #>     <Scale>0.0001<\/Scale> #>     <Offset>0<\/Offset> #>   <\/VRTRasterBand> #>   <VRTRasterBand dataType=\"UInt16\" band=\"2\"> #>     <NoDataValue>0<\/NoDataValue> #>     <ComplexSource> #>       <SourceFilename relativeToVRT=\"0\">/home/runner/work/_temp/Library/vrtility/s2-data/exe_2024-06-02_12-21-19.tif<\/SourceFilename> #>       <SourceBand>2<\/SourceBand> #>       <SourceProperties RasterXSize=\"354\" RasterYSize=\"334\" DataType=\"UInt16\" BlockXSize=\"256\" BlockYSize=\"256\"/> #>       <SrcRect xOff=\"0\" yOff=\"0\" xSize=\"354\" ySize=\"334\"/> #>       <DstRect xOff=\"0\" yOff=\"0\" xSize=\"354\" ySize=\"334\"/> #>       <NODATA>0<\/NODATA> #>     <\/ComplexSource> #>     <Description>B03<\/Description> #>     <Scale>0.0001<\/Scale> #>     <Offset>0<\/Offset> #>   <\/VRTRasterBand> #>   <VRTRasterBand dataType=\"UInt16\" band=\"3\"> #>     <NoDataValue>0<\/NoDataValue> #>     <ComplexSource> #>       <SourceFilename relativeToVRT=\"0\">/home/runner/work/_temp/Library/vrtility/s2-data/exe_2024-06-02_12-21-19.tif<\/SourceFilename> #>       <SourceBand>3<\/SourceBand> #>       <SourceProperties RasterXSize=\"354\" RasterYSize=\"334\" DataType=\"UInt16\" BlockXSize=\"256\" BlockYSize=\"256\"/> #>       <SrcRect xOff=\"0\" yOff=\"0\" xSize=\"354\" ySize=\"334\"/> #>       <DstRect xOff=\"0\" yOff=\"0\" xSize=\"354\" ySize=\"334\"/> #>       <NODATA>0<\/NODATA> #>     <\/ComplexSource> #>     <Description>B04<\/Description> #>     <Scale>0.0001<\/Scale> #>     <Offset>0<\/Offset> #>   <\/VRTRasterBand> #>   <VRTRasterBand dataType=\"UInt16\" band=\"4\"> #>     <NoDataValue>0<\/NoDataValue> #>     <ComplexSource> #>       <SourceFilename relativeToVRT=\"0\">/home/runner/work/_temp/Library/vrtility/s2-data/exe_2024-06-02_12-21-19.tif<\/SourceFilename> #>       <SourceBand>4<\/SourceBand> #>       <SourceProperties RasterXSize=\"354\" RasterYSize=\"334\" DataType=\"UInt16\" BlockXSize=\"256\" BlockYSize=\"256\"/> #>       <SrcRect xOff=\"0\" yOff=\"0\" xSize=\"354\" ySize=\"334\"/> #>       <DstRect xOff=\"0\" yOff=\"0\" xSize=\"354\" ySize=\"334\"/> #>       <NODATA>0<\/NODATA> #>     <\/ComplexSource> #>     <Description>SCL<\/Description> #>     <Scale>0.0001<\/Scale> #>     <Offset>0<\/Offset> #>   <\/VRTRasterBand> #>   <Metadata> #>     <MDI key=\"datetime\"/> #>   <\/Metadata> #> <\/VRTDataset> #>  #>  #>  #>  VRT SRS:  #> PROJCS[\"unknown\",GEOGCS[\"unknown\",DATUM[\"Unknown based on WGS 84 ellipsoid\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]]],PROJECTION[\"Lambert_Azimuthal_Equal_Area\"],PARAMETER[\"latitude_of_center\",50.72],PARAMETER[\"longitude_of_center\",-3.51],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]] #>  #>  #> Bounding Box: -3540 -3340 3540 3340 #> Pixel res: 20, 20 #> Assets: B02, B03, B04, SCL #> No Data Value(s): 0, 0, 0, 0 #> Date Time: NA"},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_stack.html","id":null,"dir":"Reference","previous_headings":"","what":"Stack VRT files from a vrt_collection object — vrt_stack","title":"Stack VRT files from a vrt_collection object — vrt_stack","text":"Stack VRT files vrt_collection object Print vrt_block object","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_stack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stack VRT files from a vrt_collection object — vrt_stack","text":"","code":"vrt_stack(x, ...)  # S3 method for class 'vrt_collection' vrt_stack(x, quiet = TRUE, ...)  # S3 method for class 'vrt_stack' print(x, xml = FALSE, pixfun = FALSE, maskfun = FALSE, ...)"},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_stack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stack VRT files from a vrt_collection object — vrt_stack","text":"x vrt_collection object ... Additional arguments used quiet Logical. TRUE, suppress GDAL progress bar xml logical indicating whether print XML pixfun logical indicating whether print pixel function maskfun logical indicating whether print mask function","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_stack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stack VRT files from a vrt_collection object — vrt_stack","text":"vrt_stack object","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_stack.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stack VRT files from a vrt_collection object — vrt_stack","text":"function stacks VRT files vrt_collection object single VRT file containing multiple layers RasterBand. VRT files stacked order provided vrt_collection object. derived rstac object, order ordered date.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_tools.html","id":null,"dir":"Reference","previous_headings":"","what":"The official GDAL VRT XML schema A copy of the official VRT schema for vritility VRT validation. — vrt_xml_schema","title":"The official GDAL VRT XML schema A copy of the official VRT schema for vritility VRT validation. — vrt_xml_schema","text":"Loads copy official xml schema provided vrt_xml_schema dataset.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_tools.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The official GDAL VRT XML schema A copy of the official VRT schema for vritility VRT validation. — vrt_xml_schema","text":"","code":"vrt_xml_schema  vrt_schema(schema = vrtility::vrt_xml_schema)"},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_tools.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"The official GDAL VRT XML schema A copy of the official VRT schema for vritility VRT validation. — vrt_xml_schema","text":"character","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_tools.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"The official GDAL VRT XML schema A copy of the official VRT schema for vritility VRT validation. — vrt_xml_schema","text":"https://raw.githubusercontent.com/OSGeo/gdal/master/frmts/vrt/data/gdalvrt.xsd","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_tools.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The official GDAL VRT XML schema A copy of the official VRT schema for vritility VRT validation. — vrt_xml_schema","text":"schema character string xml schema - mainly intended use official gdal VRT schema.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_tools.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The official GDAL VRT XML schema A copy of the official VRT schema for vritility VRT validation. — vrt_xml_schema","text":"xml_document object","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_tools.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The official GDAL VRT XML schema A copy of the official VRT schema for vritility VRT validation. — vrt_xml_schema","text":"","code":"vrt_schema() #> {xml_document} #> <schema elementFormDefault=\"qualified\" version=\"1.0\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"> #>  [1] <xs:element name=\"VRTDataset\" type=\"VRTDatasetType\">\\n  <xs:annotation>\\ ... #>  [2] <xs:complexType name=\"VRTDatasetType\">\\n  <xs:sequence>\\n    <xs:choice  ... #>  [3] <xs:simpleType name=\"DatasetSubclassType\">\\n  <xs:restriction base=\"xs:s ... #>  [4] <xs:complexType name=\"OverviewListType\">\\n  <xs:simpleContent>\\n    <xs: ... #>  [5] <xs:simpleType name=\"integerList\">\\n  <xs:list itemType=\"xs:integer\"/>\\n ... #>  [6] <xs:complexType name=\"SRSType\">\\n  <xs:simpleContent>\\n    <xs:extension ... #>  [7] <xs:simpleType name=\"nonNegativeInteger32\">\\n  <xs:restriction base=\"xs: ... #>  [8] <xs:complexType name=\"GCPListType\">\\n  <xs:sequence>\\n    <xs:element na ... #>  [9] <xs:complexType name=\"GCPType\">\\n  <xs:attribute name=\"Id\" type=\"xs:stri ... #> [10] <xs:complexType name=\"MetadataType\">\\n  <xs:sequence>\\n    <!--<xs:choic ... #> [11] <xs:complexType name=\"GDALWarpOptionsType\">\\n  <xs:sequence>\\n    <xs:an ... #> [12] <xs:complexType name=\"PansharpeningOptionsType\">\\n  <xs:sequence>\\n    < ... #> [13] <xs:simpleType name=\"NoDataOrNoneType\">\\n  <xs:union memberTypes=\"xs:dou ... #> [14] <xs:complexType name=\"PanchroBandType\">\\n  <xs:sequence>\\n    <xs:elemen ... #> [15] <xs:complexType name=\"SpectralBandType\">\\n  <xs:sequence>\\n    <xs:eleme ... #> [16] <xs:complexType name=\"AlgorithmOptionsType\">\\n  <xs:sequence>\\n    <xs:a ... #> [17] <xs:complexType name=\"InputType\">\\n  <xs:sequence>\\n    <xs:choice minOc ... #> [18] <xs:complexType name=\"OutputBandsType\">\\n  <xs:sequence/>\\n  <xs:attribu ... #> [19] <xs:complexType name=\"ProcessingStepsType\">\\n  <xs:sequence minOccurs=\"1 ... #> [20] <xs:complexType name=\"ProcessingStepType\">\\n  <xs:annotation>\\n    <xs:d ... #> ..."},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_warp.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct A warped VRT or warped VRT collection. — vrt_warp","title":"Construct A warped VRT or warped VRT collection. — vrt_warp","text":"Construct warped VRT warped VRT collection.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_warp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct A warped VRT or warped VRT collection. — vrt_warp","text":"","code":"vrt_warp(x, t_srs, te, tr, resampling, quiet)  # S3 method for class 'vrt_block' vrt_warp(   x,   t_srs,   te,   tr,   resampling = c(\"bilinear\", \"near\", \"cubic\", \"cubicspline\", \"lanczos\", \"average\", \"rms\",     \"mode\", \"max\", \"min\", \"med\", \"q1\", \"q3\", \"sum\"),   quiet = TRUE )  # S3 method for class 'vrt_collection' vrt_warp(   x,   t_srs,   te,   tr,   resampling = c(\"bilinear\", \"near\", \"cubic\", \"cubicspline\", \"lanczos\", \"average\", \"rms\",     \"mode\", \"max\", \"min\", \"med\", \"q1\", \"q3\", \"sum\"),   quiet = TRUE )"},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_warp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct A warped VRT or warped VRT collection. — vrt_warp","text":"x vrt_collection vrt_block (likely former). t_srs character target SRS must numeric EPSG code, SRS like character proj4 string WKT. te numeric vector target extent form c(xmin, ymin, xmax, ymax) using SRS t_srs. tr numeric vector target resolution form c(xres, yres) resampling character vector resampling methods used band. default \"bilinear\". \"near\" sampling used mask_band provided. quiet logical indicating whether suppress progress bar.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_warp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct A warped VRT or warped VRT collection. — vrt_warp","text":"function generates warped VRT objects types. particularly useful want create vrt_stack input images span multiple spatial reference systems. situation, warping input data must align desired oputput grid.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_warp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct A warped VRT or warped VRT collection. — vrt_warp","text":"","code":"s2files <- fs::dir_ls(system.file(\"s2-data\", package = \"vrtility\")) ex_collect <- vrt_collect(s2files) t_block <- ex_collect[[1]][[1]] vrt_warp( ex_collect,    t_srs = t_block$srs,    te = t_block$bbox,    tr = t_block$res  ) #> → <VRT Collection> #>  #>  VRT SRS:  #> PROJCS[\"unknown\",GEOGCS[\"unknown\",DATUM[\"Unknown based on WGS 84 ellipsoid\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]]],PROJECTION[\"Lambert_Azimuthal_Equal_Area\"],PARAMETER[\"latitude_of_center\",50.72],PARAMETER[\"longitude_of_center\",-3.51],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]] #>  #>  #> Bounding Box: -3540 -3340 3540 3340 #> Pixel res: 20, 20 #> Start Date: NA #> End Date: NA #> Number of Items: 5 #> Assets: B02, B03, B04, SCL"},{"path":"https://permian-global-research.github.io/vrtility/reference/vrtility.html","id":null,"dir":"Reference","previous_headings":"","what":"vrtility: GDAL VRT utilities for R — vrtility","title":"vrtility: GDAL VRT utilities for R — vrtility","text":"vrtility package building raster (primarily remote sensing) processing pipelines. makes use GDAL's VRT (virtual raster format) capabilities efficient processing large raster datasets. package's primary focus  use GDAL VRT pixel functions. pixel functions (currently implemented python) used apply cloud masks summarise pixel values (e.g. median) multiple images (.e create composite image). hope add C++ expression based pixel functions time.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrtility.html","id":"spatial-helpers","dir":"Reference","previous_headings":"","what":"Spatial helpers","title":"vrtility: GDAL VRT utilities for R — vrtility","text":"bbox_to_projected Convert long/lat bounding box projected bounding box to_wkt Get wkt string numeric epsg code character proj4 string","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrtility.html","id":"stac-helpers","dir":"Reference","previous_headings":"","what":"STAC helpers","title":"vrtility: GDAL VRT utilities for R — vrtility","text":"stac_query Query STAC catalog sentinel2_stac_query Query STAC catalog Sentinel-2 data sign_planetary_computer Sign URL Planetary Computer","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrtility.html","id":"vrt-utilities","dir":"Reference","previous_headings":"","what":"VRT utilities","title":"vrtility: GDAL VRT utilities for R — vrtility","text":"vrt_collect Create vrt_collection object vrt_set_maskfun Set mask function vrt object vrt_stack Create vrt_stack object vrt_set_py_pixelfun Set pixel function vrt stack object vrt_set_gdal_pixelfun Set GDAL pixel function vrt stack object vrt_set_scale Set scale offset values vrt_x object vrt_move_band Move band vrt_x object vrt_set_nodata Set nodata value vrt_x object vrt_warp Warp vrt_x object warped vrt vrt_compute Compute vrt pipeline (using GDAL)","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrtility.html","id":"vrt-pixel-functions","dir":"Reference","previous_headings":"","what":"VRT pixel functions","title":"vrtility: GDAL VRT utilities for R — vrtility","text":"vrt_set_py_pixelfun Set pixel function vrt stack object set_mask_numpy pixel function apply bitmask build_intmask pixel function build mask mask band mask values integers build_bitmask pixel function build mask mask band mask values bit positions median_numpy pixel function compute median","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrtility.html","id":"python-environment-helpers","dir":"Reference","previous_headings":"","what":"python environment helpers","title":"vrtility: GDAL VRT utilities for R — vrtility","text":"vrtility_py_require Require python package set_py_env_vals Set python environment variables options","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrtility.html","id":"vrt-helpers","dir":"Reference","previous_headings":"","what":"VRT helpers","title":"vrtility: GDAL VRT utilities for R — vrtility","text":"vrt_save Save VRT object file vrt_schema (data object)official GDAL VRT schema character object","code":""},{"path":[]},{"path":"https://permian-global-research.github.io/vrtility/reference/vrtility.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vrtility: GDAL VRT utilities for R — vrtility","text":"Maintainer: Hugh Graham hugh.graham@permianglobal.com (ORCID)","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrtility_internal.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract band matrices using C++ — extract_band_matrices","title":"Extract band matrices using C++ — extract_band_matrices","text":"Internal C++ function wrapped R Convert matrix list vectors, vector represents row matrix.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrtility_internal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract band matrices using C++ — extract_band_matrices","text":"","code":"extract_band_matrices(   x,   row_indices,   col_indices,   n_cells,   n_timepoints,   n_bands )  matrix_to_rowlist(x)"},{"path":"https://permian-global-research.github.io/vrtility/reference/vrtility_internal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract band matrices using C++ — extract_band_matrices","text":"x matrix. row_indices vector row indices. col_indices vector column indices. n_cells number cells. n_timepoints number time points. n_bands number bands.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrtility_internal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract band matrices using C++ — extract_band_matrices","text":"list matrices, matrix corresponds band. list vectors, vector represents row matrix.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrtility_python.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup the vrtility Python environment — vrtility_py_require","title":"Setup the vrtility Python environment — vrtility_py_require","text":"thin wrapper around reticulate::py_install function set necessary python environment set options required vrtility package. environment set_py_env_vals sets environment variables required vrtility package - typically required.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrtility_python.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup the vrtility Python environment — vrtility_py_require","text":"","code":"vrtility_py_require(   packages = NULL,   python_version = \">=3.9\",   ...,   exclude_newer = NULL,   action = c(\"add\", \"remove\", \"set\") )  set_py_env_vals()  compute_with_py_env(code)"},{"path":"https://permian-global-research.github.io/vrtility/reference/vrtility_python.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup the vrtility Python environment — vrtility_py_require","text":"packages character vector Python packages available session. can simple package names like \"jax\" names version constraints like \"jax[cpu]>=0.5\". Pip style syntax installing local files git repository also supported (see details). python_version character vector Python version constraints  (e.g., \"3.10\" \">=3.9,<3.13\"). ... Reserved future extensions; must empty. exclude_newer Limit package versions published specified date. offers lightweight alternative freezing package versions, helping guard Python package updates break workflow. Accepts strings formatted RFC 3339 timestamps (e.g., \"2006-12-02T02:07:43Z\") local dates format (e.g., \"2006-12-02\") system's configured time zone. exclude_newer set, set action can override . action Determines py_require() processes provided requirements. Options : \"add\" (default): Adds entries current set requirements. \"remove\": Removes exact matches requirements list. Requests remove nonexistent entries ignored. example, \"numpy==2.2.2\" list, passing \"numpy\" action=\"remove\" remove . \"set\": Clears existing requirements replaces provided ones. Packages Python version can set independently. code code execute","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrtility_python.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup the vrtility Python environment — vrtility_py_require","text":"Invisible","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrtility_python.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setup the vrtility Python environment — vrtility_py_require","text":"general function shouldnt required , example, wish use custom python pixel function uses python package installed default (currently numpy), can use function install package, making sure set action \"add\". set_py_env_vals required running reticulate::py_env non-standard way. general lot easier  use # vrtility_py_require automatically set necessary options.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrtility_python.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setup the vrtility Python environment — vrtility_py_require","text":"","code":"compute_with_py_env(print(\"Hello World\")) #> [1] \"Hello World\""}]
