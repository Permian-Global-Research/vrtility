[{"path":"https://permian-global-research.github.io/vrtility/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to vrtility","title":"Contributing to vrtility","text":"outlines propose change vrtility.","code":""},{"path":"https://permian-global-research.github.io/vrtility/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to vrtility","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://permian-global-research.github.io/vrtility/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to vrtility","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://permian-global-research.github.io/vrtility/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to vrtility","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"Permian-Global-Research/vrtility\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://permian-global-research.github.io/vrtility/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to vrtility","text":"use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://permian-global-research.github.io/vrtility/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to vrtility","text":"Please note vrtility project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://permian-global-research.github.io/vrtility/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://permian-global-research.github.io/vrtility/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://permian-global-research.github.io/vrtility/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://permian-global-research.github.io/vrtility/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://permian-global-research.github.io/vrtility/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://permian-global-research.github.io/vrtility/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://permian-global-research.github.io/vrtility/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://permian-global-research.github.io/vrtility/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://permian-global-research.github.io/vrtility/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://permian-global-research.github.io/vrtility/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://permian-global-research.github.io/vrtility/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://permian-global-research.github.io/vrtility/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hugh Graham. Author, maintainer.","code":""},{"path":"https://permian-global-research.github.io/vrtility/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Graham H (2025). vrtility: R package efficient raster processing using GDAL VRTs. R package version 0.0.4.0, https://github.com/Permian-Global-Research/vrtility, https://permian-global-research.github.io/vrtility/.","code":"@Manual{,   title = {vrtility: R package for efficient raster processing using GDAL VRTs},   author = {Hugh Graham},   year = {2025},   note = {R package version 0.0.4.0,     https://github.com/Permian-Global-Research/vrtility},   url = {https://permian-global-research.github.io/vrtility/}, }"},{"path":"https://permian-global-research.github.io/vrtility/index.html","id":"vrtility","dir":"","previous_headings":"","what":"R package for efficient raster processing using GDAL VRTs","title":"R package for efficient raster processing using GDAL VRTs","text":"vrtility R package aims make best use GDAL’s VRT capabilities efficient processing large raster datasets - mainly Earth Observation mind. package’s primary focus use GDAL VRT pixel functions using python. numpy based python pixel functions used apply cloud masks summarise pixel values (e.g. median) multiple images (.e create composite image). main features made possible {gdalraster} {reticulate} packages. [!CAUTION] package active development likely change. Contributions suggestions still welcome!","code":""},{"path":"https://permian-global-research.github.io/vrtility/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"R package for efficient raster processing using GDAL VRTs","text":"intermediate downloads - use nested VRTs enables download processing required data single gdalwarp (gdal_translate) call. reduces disk read/write time. modular design: ’re basically creating remote sensing pipelines using nested VRTs. allows easy addition new pixel functions masking functions. easily adapted deriving spectral indices calculating complex time series functions. extremely efficient parallel processing using gdalraster mirai using “gdalraster” compute engine.","code":""},{"path":"https://permian-global-research.github.io/vrtility/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R package for efficient raster processing using GDAL VRTs","text":"can install development version vrtility GitHub :","code":"# install.packages(\"pak\") pak::pkg_install(\"Permian-Global-Research/vrtility\")"},{"path":"https://permian-global-research.github.io/vrtility/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"R package for efficient raster processing using GDAL VRTs","text":"simple example : Define bounding box search STAC catalog Sentinel-2 data Create vrt_collection object - essentially list individual VRTs (making one image) refer vrt_blocks package. , apply mask using pixel functions. simply modifies XML VRT “blocks”. set images one common spatial reference system (SRS) convert vrt_blocks vrt_collection warped VRTs, giving us vrt_collection_warped object. images “stacked” (combined single VRT multiple layers VRTRasterBand), giving us vrt_stack object. median pixel function added vrt_stack. executed end vrt pipeline using vrt_compute. using gdalraster engine write output , combination mirai package downloads processes data parallel across bands within bands (determined nsplits argument).","code":"library(vrtility)  #  Set up asynchronous workers to parallelise vrt_collect and vrt_set_maskfun mirai::daemons(6) #> [1] 6 bbox <- gdalraster::bbox_from_wkt(   wkt = wk::wkt(\"POINT (144.3 -7.6)\"),   extend_x = 0.17,   extend_y = 0.125 )  te <- bbox_to_projected(bbox) trs <- attr(te, \"wkt\")  s2_stac <- sentinel2_stac_query(   bbox = bbox,   start_date = \"2023-01-01\",   end_date = \"2023-12-31\",   max_cloud_cover = 35,   assets = c(\"B02\", \"B03\", \"B04\", \"SCL\") ) # number of items: length(s2_stac$features) #> [1] 12 system.time({   median_composite <- vrt_collect(s2_stac) |>     vrt_set_maskfun(       mask_band = \"SCL\",       mask_values = c(0, 1, 2, 3, 8, 9, 10, 11)     ) |>     vrt_warp(t_srs = trs, te = te, tr = c(10, 10)) |>     vrt_stack() |>     vrt_set_pixelfun() |>     vrt_compute(       outfile = fs::file_temp(ext = \"tif\"),       engine = \"gdalraster\",       nsplits = 3L     ) }) #>    user  system elapsed  #>   2.182   0.127  38.621 plot_raster_src(   median_composite,   c(3, 2, 1) )"},{"path":"https://permian-global-research.github.io/vrtility/index.html","id":"asynchronous-downloadprocessing","dir":"","previous_headings":"","what":"Asynchronous download/processing","title":"R package for efficient raster processing using GDAL VRTs","text":"{vrtility} uses {mirai}, alongside {purrr} manage asynchronous parallelisation. setting mirai::daemons(n) running vrt pipeline, can improve performance, depending speed server holding data. cases make little difference example, Microsoft Planetary Computer STAC API already pretty fast. However, NASA’s Earthdata STAC API, can make huge difference. Paralellism available three functions present: vrt_collect, vrt_set_maskfun vrt_compute. order use asynchronous processing, vrt_compute function, need set engine = \"gdalraster\". “gdalraster” engine always parallelised across bands default, nested parallelisation step possible within bands setting nsplits value greater 1. want reduce number processes used, explicitly set mirai::daemons(1) just use “warp” engine.","code":""},{"path":"https://permian-global-research.github.io/vrtility/index.html","id":"using-on-disk-rasters","dir":"","previous_headings":"","what":"Using on-disk rasters","title":"R package for efficient raster processing using GDAL VRTs","text":"can also use -disk raster files , shown example dataset - note inputs multiple spatial reference systems therefore need warp (example) stacking. images CRS, might save lot time warping vrt_compute. can plot vrt_{x} objects using plot() note large rasters, computing pixel functions, can slow better using vrt_compute write disk plotting output.","code":"s2files <- fs::dir_ls(system.file(\"s2-data\", package = \"vrtility\"))[1:4]  ex_collect <- vrt_collect(s2files) par(mfrow = c(2, 2)) purrr::walk(   seq_len(ex_collect$n_items),   ~ plot(ex_collect, item = .x, bands = c(3, 2, 1)) ) ex_collect_mask <- vrt_set_maskfun(   ex_collect,   mask_band = \"SCL\",   mask_values = c(0, 1, 2, 3, 8, 9, 10, 11), )  purrr::walk(   seq_len(ex_collect_mask$n_items),   ~ plot(ex_collect_mask, item = .x, bands = c(3, 2, 1)) ) # extract a block to use as a template for warping t_block <- ex_collect[[1]][[4]]  ex_composite <- vrt_warp(   ex_collect_mask,   t_srs = t_block$srs,   te = t_block$bbox,   tr = c(20, 20) ) |>   vrt_stack() |>   vrt_set_pixelfun(pixfun = median_numpy())  par(mfrow = c(1, 1)) plot(ex_composite, bands = c(3, 2, 1), quiet = TRUE) # write to disk if we wanted to... # vrt_compute( #   ex_composite, #   outfile = fs::file_temp(ext = \"tif\"), #   engine = \"warp\" # )"},{"path":"https://permian-global-research.github.io/vrtility/index.html","id":"to-do","dir":"","previous_headings":"","what":"TO DO:","title":"R package for efficient raster processing using GDAL VRTs","text":"Add additional pixel functions (geometric median particular). Add default C++ pixel functions. time series functions… Add custom C++ expression based pixel functions","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/gdal_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Create GDAL configuration options. — gdal_config_opts","title":"Create GDAL configuration options. — gdal_config_opts","text":"Create GDAL configuration options. Create GDAL creation options Create GDAL warp options Set GDAL configuration options","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/gdal_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create GDAL configuration options. — gdal_config_opts","text":"","code":"gdal_config_opts(   VSI_CACHE = \"TRUE\",   GDAL_CACHEMAX = \"50%\",   VSI_CACHE_SIZE = \"268435456\",   GDAL_NUM_THREADS = \"ALL_CPUS\",   GDAL_DISABLE_READDIR_ON_OPEN = \"EMPTY_DIR\",   GDAL_MAX_DATASET_POOL_SIZE = \"500\",   GDAL_INGESTED_BYTES_AT_OPEN = \"32000\",   CPL_VSIL_CURL_ALLOWED_EXTENSIONS = \".tif .TIF\",   CPL_VSIL_CURL_USE_HEAD = \"NO\",   GDAL_HTTP_MAX_RETRY = \"5\",   GDAL_HTTP_RETRY_DELAY = \"3\",   GDAL_HTTP_MULTIPLEX = \"YES\",   GDAL_HTTP_VERSION = \"2\",   GDAL_HTTP_MERGE_CONSECUTIVE_RANGES = \"YES\",   ... )  gdal_creation_options(   output_format = NULL,   COMPRESS = \"LZW\",   PREDICTOR = \"2\",   NUM_THREADS = \"ALL_CPUS\",   BIGTIFF = \"YES\",   TILED = \"YES\",   BLOCKXSIZE = \"128\",   BLOCKYSIZE = \"128\",   COPY_SRC_OVERVIEWS = \"YES\",   ... )  gdalwarp_options(multi = TRUE, warp_memory = \"50%\", num_threads = \"ALL_CPUS\")  set_gdal_config(x, scope = c(\"gdalraster\", \"sys\"))"},{"path":"https://permian-global-research.github.io/vrtility/reference/gdal_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create GDAL configuration options. — gdal_config_opts","text":"VSI_CACHE cache related GDAL_CACHEMAX cache related VSI_CACHE_SIZE cache related GDAL_NUM_THREADS General options GDAL_DISABLE_READDIR_ON_OPEN General options GDAL_MAX_DATASET_POOL_SIZE General options GDAL_INGESTED_BYTES_AT_OPEN General options CPL_VSIL_CURL_ALLOWED_EXTENSIONS Optimize HTTP connections CPL_VSIL_CURL_USE_HEAD Optimize HTTP connections GDAL_HTTP_MAX_RETRY Optimize HTTP connections GDAL_HTTP_RETRY_DELAY Optimize HTTP connections GDAL_HTTP_MULTIPLEX Optimize HTTP connections GDAL_HTTP_VERSION General options GDAL_HTTP_MERGE_CONSECUTIVE_RANGES General options ... Additional -co options set output_format Output format equivalent -CLI. see details COMPRESS Compression method PREDICTOR Prediction method NUM_THREADS Number threads BIGTIFF Use BigTIFF TILED Use tiling BLOCKXSIZE Block size X BLOCKYSIZE Block size Y COPY_SRC_OVERVIEWS Copy source overviews multi Logical indicating whether use multi-threading, equivalent -multi CLI warp_memory Memory use warping equivalent -wm CLI num_threads Number threads use warping equivalent -wo NUM_THREADS CLI. \"ALL_CPUS\" (default) use available CPUs, alternartively integer can supplied - NULL use single threaded process. x named character vector configuration options scope character vector scope set options . Either \"gdalraster\" \"sys\".","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/gdal_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create GDAL configuration options. — gdal_config_opts","text":"Character vector options","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/gdal_options.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create GDAL configuration options. — gdal_config_opts","text":"output_format, equaivalent -gdaltranslate gdalwarp CLIs. NULL, output format inferred file extension.","code":""},{"path":[]},{"path":"https://permian-global-research.github.io/vrtility/reference/gdal_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create GDAL configuration options. — gdal_config_opts","text":"","code":"gdal_config_opts(GDAL_HTTP_USERPWD = \"user:password\") #>                          VSI_CACHE                      GDAL_CACHEMAX  #>                             \"TRUE\"                              \"50%\"  #>                     VSI_CACHE_SIZE                   GDAL_NUM_THREADS  #>                        \"268435456\"                         \"ALL_CPUS\"  #>       GDAL_DISABLE_READDIR_ON_OPEN         GDAL_MAX_DATASET_POOL_SIZE  #>                        \"EMPTY_DIR\"                              \"500\"  #>        GDAL_INGESTED_BYTES_AT_OPEN   CPL_VSIL_CURL_ALLOWED_EXTENSIONS  #>                            \"32000\"                        \".tif .TIF\"  #>             CPL_VSIL_CURL_USE_HEAD                GDAL_HTTP_MAX_RETRY  #>                               \"NO\"                                \"5\"  #>              GDAL_HTTP_RETRY_DELAY                GDAL_HTTP_MULTIPLEX  #>                                \"3\"                              \"YES\"  #>                  GDAL_HTTP_VERSION GDAL_HTTP_MERGE_CONSECUTIVE_RANGES  #>                                \"2\"                              \"YES\"  #>                  GDAL_HTTP_USERPWD  #>                    \"user:password\"  gdal_creation_options(COMPRESS = \"JPEG\", JPEG_QUALITY = \"90\") #>  [1] \"-co\"                    \"COMPRESS=JPEG\"          \"-co\"                    #>  [4] \"PREDICTOR=2\"            \"-co\"                    \"NUM_THREADS=ALL_CPUS\"   #>  [7] \"-co\"                    \"BIGTIFF=YES\"            \"-co\"                    #> [10] \"TILED=YES\"              \"-co\"                    \"BLOCKXSIZE=128\"         #> [13] \"-co\"                    \"BLOCKYSIZE=128\"         \"-co\"                    #> [16] \"COPY_SRC_OVERVIEWS=YES\" \"-co\"                    \"JPEG_QUALITY=90\"        gdalwarp_options(multi = TRUE, warp_memory = \"50%\", num_threads = 4) #> [1] \"-multi\"        \"-wm\"           \"50%\"           \"-wo\"           #> [5] \"NUM_THREADS=4\" set_gdal_config(gdal_config_opts())"},{"path":"https://permian-global-research.github.io/vrtility/reference/median_numpy.html","id":null,"dir":"Reference","previous_headings":"","what":"python pixel function for the median using numpy — median_numpy","title":"python pixel function for the median using numpy — median_numpy","text":"python pixel function median using numpy","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/median_numpy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"python pixel function for the median using numpy — median_numpy","text":"","code":"median_numpy()"},{"path":"https://permian-global-research.github.io/vrtility/reference/median_numpy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"python pixel function for the median using numpy — median_numpy","text":"character python function","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/plot_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"plot a raster file or vrt_x object — plot_raster_src","title":"plot a raster file or vrt_x object — plot_raster_src","text":"wrapper around gdalraster::plot_raster simplifies process plotting raster file.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/plot_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot a raster file or vrt_x object — plot_raster_src","text":"","code":"plot_raster_src(   x,   bands = 1,   pal = grDevices::hcl.colors(10, \"Viridis\"),   nbands = length(bands),   col_tbl = NULL,   maxColorValue = 1,   normalize = TRUE,   adj_low = 0.8,   minmax_def = NULL,   minmax_pct_cut = NULL,   col_map_fn = if (nbands == 1) scales::colour_ramp(pal, alpha = FALSE) else NULL,   xlim = NULL,   ylim = NULL,   interpolate = TRUE,   asp = 1,   axes = TRUE,   main = \"\",   xlab = \"\",   ylab = \"\",   xaxs = \"r\",   yaxs = \"r\",   legend = if (nbands == 1) TRUE else FALSE,   digits = 2,   na_col = grDevices::rgb(0, 0, 0, 0),   ... )  # S3 method for class 'vrt_block' plot(x, ..., config_options = gdal_config_opts(), quiet = FALSE)  # S3 method for class 'vrt_stack' plot(x, ..., config_options = gdal_config_opts(), quiet = FALSE)  # S3 method for class 'vrt_stack_warped' plot(x, ..., config_options = gdal_config_opts(), quiet = FALSE)  # S3 method for class 'vrt_collection' plot(x, item, ..., config_options = gdal_config_opts(), quiet = FALSE)"},{"path":"https://permian-global-research.github.io/vrtility/reference/plot_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot a raster file or vrt_x object — plot_raster_src","text":"x path raster file bands numeric vector band numbers plot must length 1 3. pal character vector colors use plotting single band. nbands number bands data. Must either 1 (grayscale) 3 (RGB). RGB, data interleaved band. nbands NULL (default), nbands = 3 assumed input data contain 3 bands, otherwise band 1 used. col_tbl color table matrix data frame four five columns. Column 1 contains numeric pixel values. Columns 2:4 contain intensities red, green blue primaries (0:1 default, use integer 0:255 setting maxColorValue = 255). optional column 5 may contain alpha transparency values, 0 fully transparent 1 (maxColorValue) opaque (default column 5 missing). data GDALRaster object, built-color table used automatically one exists dataset. maxColorValue number giving maximum color values range col_tbl (see ). default 1. normalize Logical. TRUE rescale pixel values range [0,1], normalized full range pixel data default (min(data), max(data), per band). Ignored col_tbl used. Set normalize FALSE color map function used operates raw pixel values (see col_map_fn ). adj_low numeric value adjust lower quantile value . useful example sea presents dark. minmax_def Normalize user-defined min/max values (terms pixel data, per band). single-band grayscale, numeric vector length two containing min, max. 3-band RGB, numeric vector length six containing b1_min, b2_min, b3_min, b1_max, b2_max, b3_max. minmax_pct_cut Normalize truncated range pixel data using percentile cutoffs (removes outliers). numeric vector length two giving percentiles use (e.g., c(2, 98)). Applied per band. Ignored minmax_def used. col_map_fn optional color map function (default grDevices::gray single-band data grDevices::rgb 3-band). Ignored col_tbl used. Set normalize FALSE using color map function operates raw pixel values. xlim Numeric vector length two giving x coordinate range. data GDALRaster object, default raster xmin, xmax georeferenced coordinates, otherwise default uses pixel/line coordinates (c(0, xsize)). ylim Numeric vector length two giving y coordinate range. data GDALRaster object, default raster ymin, ymax georeferenced coordinates, otherwise default uses pixel/line coordinates (c(ysize, 0)). interpolate Logical indicating whether apply linear interpolation image drawing (default TRUE). asp Numeric. aspect ratio y/x (see ?plot.window). axes Logical. TRUE draw axes (default). main main title (top). xlab Title x axis (see ?title). ylab Title y axis (see ?title). xaxs style axis interval calculation used x axis (see ?par). yaxs style axis interval calculation used y axis (see ?par). legend Logical indicating whether include legend plot. Currently, legends supported continuous data. color table used one specified raster built-color table, otherwise value col_map_fn used. digits number digits display decimal point legend labels raster data floating point. na_col Color use NA 7- 9-character hexadecimal code. default transparent (\"#00000000\", return value rgb(0,0,0,0)). ... parameters passed plot.default(). config_options named character vector gdal config options set attempting read VRT. quiet Logical indicating whether suppress messages. item numeric index item, vrt_collection, plot","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/spatial_helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"Project a lat/long bounding box to a generic projected coordinate system — bbox_to_projected","title":"Project a lat/long bounding box to a generic projected coordinate system — bbox_to_projected","text":"Project lat/long bounding box generic projected coordinate system Convert object wkt.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/spatial_helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Project a lat/long bounding box to a generic projected coordinate system — bbox_to_projected","text":"","code":"bbox_to_projected(   x,   proj = c(\"laea\", \"aeqd\", \"utm\", \"pconic\", \"eqdc\"),   ellps = \"WGS84\",   no_defs = TRUE,   opts = \"\" )  to_wkt(x)  # Default S3 method to_wkt(x)  # S3 method for class 'numeric' to_wkt(x)  # S3 method for class 'character' to_wkt(x)"},{"path":"https://permian-global-research.github.io/vrtility/reference/spatial_helpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Project a lat/long bounding box to a generic projected coordinate system — bbox_to_projected","text":"x object convert wkt. proj character vector. projection use. One \"laea\", \"aeqd\", \"utm\", \"pconic\", \"eqdc\". ellps character vector. ellipsoid use. Select sf_proj_info(type = \"ellps\"). no_defs logical. Whether include +no_defs option proj string. opts character vector. Additional proj options pass proj string. see details information.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/spatial_helpers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Project a lat/long bounding box to a generic projected coordinate system — bbox_to_projected","text":"numeric vector length 4 representing projected bounding box new coordinate system. Attributes include new proj4 wkt string. character string object wkt format.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/spatial_helpers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Project a lat/long bounding box to a generic projected coordinate system — bbox_to_projected","text":"info available \"generic\" projects see: utm: https://proj.org/en/9.4/operations/projections/utm.html laea: https://proj.org/en/9.4/operations/projections/laea.html aeqd: https://proj.org/en/9.4/operations/projections/aeqd.html pconic: https://proj.org/en/9.4/operations/projections/pconic.html eqdc: https://proj.org/en/9.4/operations/projections/eqdc.html","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/spatial_helpers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Project a lat/long bounding box to a generic projected coordinate system — bbox_to_projected","text":"","code":"bbox <- gdalraster::bbox_from_wkt(   wkt = wk::wkt(\"POINT (144.3 -7.6)\"),   extend_x = 0.17,   extend_y = 0.125 )  bbox_to_projected(bbox) #> [1] -18764.54 -13827.92  18764.54  13820.53 #> attr(,\"proj4\") #> +proj=laea +lon_0=144.3 +lat_0=-7.6 +ellps=WGS84 +no_defs #> attr(,\"wkt\") #> [1] \"PROJCS[\\\"unknown\\\",GEOGCS[\\\"unknown\\\",DATUM[\\\"Unknown based on WGS 84 ellipsoid\\\",SPHEROID[\\\"WGS 84\\\",6378137,298.257223563,AUTHORITY[\\\"EPSG\\\",\\\"7030\\\"]]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.0174532925199433,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]]],PROJECTION[\\\"Lambert_Azimuthal_Equal_Area\\\"],PARAMETER[\\\"latitude_of_center\\\",-7.6],PARAMETER[\\\"longitude_of_center\\\",144.3],PARAMETER[\\\"false_easting\\\",0],PARAMETER[\\\"false_northing\\\",0],UNIT[\\\"metre\\\",1,AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],AXIS[\\\"Easting\\\",EAST],AXIS[\\\"Northing\\\",NORTH]]\""},{"path":"https://permian-global-research.github.io/vrtility/reference/stac_utilities.html","id":null,"dir":"Reference","previous_headings":"","what":"Query a STAC source — stac_query","title":"Query a STAC source — stac_query","text":"Query STAC source Sign STAC items retrieved Planetary Computer Generate Sentinel 2 stac collection doc_imes object","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/stac_utilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query a STAC source — stac_query","text":"","code":"stac_query(   bbox,   stac_source,   collection,   start_date,   end_date,   limit = 999,   ... )  sign_planetary_computer(items, subscription_key = Sys.getenv(\"rsi_pc_key\"))  sentinel2_stac_query(   bbox,   start_date,   end_date,   assets = c(\"B01\", \"B02\", \"B03\", \"B04\", \"B05\", \"B06\", \"B07\", \"B08\", \"B8A\", \"B09\", \"B11\",     \"B12\", \"SCL\"),   max_cloud_cover = 10,   stac_source = \"https://planetarycomputer.microsoft.com/api/stac/v1/\",   collection = \"sentinel-2-l2a\",   mpc_sign = TRUE )"},{"path":"https://permian-global-research.github.io/vrtility/reference/stac_utilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query a STAC source — stac_query","text":"bbox numeric vector bounding box (length 4) lat/long stac_source character string STAC source collection character string collection query start_date character string start date end_date character string end date limit number items return ... Additional arguments pass query items STACItemCollection. subscription_key Optionally, subscription key associated Planetary Computer account. time writing, required downloading Sentinel 1 RTC products, well NAIP imagery. key automatically used environment variable rsi_pc_key set. assets character vector asset names include max_cloud_cover numeric value maximum cloud cover percentage mpc_sign logical indicating whether sign items using Planetary Computer API's signing method (required using Planetary Computer STAC API).","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/stac_utilities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query a STAC source — stac_query","text":"list items STACItemCollection object signed assets url. stac_vrt object","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/stac_utilities.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query a STAC source — stac_query","text":"copied rsi package","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_cache_management.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the VRT cache directory — vrt_cache_set","title":"Set the VRT cache directory — vrt_cache_set","text":"Set VRT cache directory Destroy VRT cache directory","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_cache_management.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the VRT cache directory — vrt_cache_set","text":"","code":"vrt_cache_set(dir)  vrt_cache_destroy()"},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_cache_management.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the VRT cache directory — vrt_cache_set","text":"dir character string directory set cache","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_cache_management.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the VRT cache directory — vrt_cache_set","text":"character string directory (invisibly)","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_cache_management.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set the VRT cache directory — vrt_cache_set","text":"default cache location tempdir(). function allows set cache location different directory. mainly useful intend work parallel processing. vrtility depends saving many vrt files disk passing files processes fails using temporary directory. helper function destroy VRT cache directory. useful want clear cache directory start fresh. cache directory set tempdir() function warn bad idea proceed.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_collect.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct the base VRT object for composing VRT pipelines. — vrt_collect","title":"Construct the base VRT object for composing VRT pipelines. — vrt_collect","text":"Construct base VRT object composing VRT pipelines.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_collect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct the base VRT object for composing VRT pipelines. — vrt_collect","text":"","code":"vrt_collect(x, band_descriptions, datetimes)  # S3 method for class 'character' vrt_collect(x, band_descriptions = NULL, datetimes = rep(\"\", length(x)))  # S3 method for class 'doc_items' vrt_collect(x, ...)  # S3 method for class 'vrt_collection' print(x, xml = FALSE, pixfun = FALSE, maskfun = FALSE, blocks = FALSE, ...)"},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_collect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct the base VRT object for composing VRT pipelines. — vrt_collect","text":"x object used create vrt_x object see details. band_descriptions character vector band descriptions. datetimes character vector datetimes. ... Additional arguments used xml logical indicating whether print XML VRT collection. pixfun logical indicating whether print pixel function. maskfun logical indicating whether print mask function. blocks logical indicating whether print blocks instead collection summary.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_collect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct the base VRT object for composing VRT pipelines. — vrt_collect","text":"vrt_collection object.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_collect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct the base VRT object for composing VRT pipelines. — vrt_collect","text":"now main way create vrt_collection object, forms basis vrrt-based pipelines vrtility using doc_items object rstac package. info create doc_items object see sentinel2_stac_query(). build vrt_stack object vrt_collection required first. vrt_collection object essentially list VRT files. stage alignment carried -  rasters virtualised -. state, can apply masks fro example summarisation required can use vrt_stack - however, order create stack collection must xontain images single spatial reference system (SRS). mutliple SRS values, use vrt_warp() unify projection collection.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_compute.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a composite raster from (virtual) raster sources. — vrt_compute","title":"Generate a composite raster from (virtual) raster sources. — vrt_compute","text":"Generate composite raster (virtual) raster sources.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_compute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a composite raster from (virtual) raster sources. — vrt_compute","text":"","code":"vrt_compute(   x,   outfile,   t_srs,   te,   tr,   resampling,   engine,   warp_options,   creation_options,   config_options,   nsplits,   add_cl_arg,   quiet )  # S3 method for class 'vrt_block' vrt_compute(   x,   outfile,   t_srs = x$srs,   te = x$bbox,   tr = x$res,   resampling = c(\"near\", \"bilinear\", \"cubic\", \"cubicspline\", \"lanczos\", \"average\", \"rms\",     \"mode\", \"max\", \"min\", \"med\", \"q1\", \"q3\", \"sum\"),   engine = c(\"warp\", \"gdalraster\", \"translate\"),   warp_options = gdalwarp_options(),   creation_options = gdal_creation_options(),   config_options = gdal_config_opts(),   nsplits = 1L,   add_cl_arg = NULL,   quiet = TRUE )  # S3 method for class 'vrt_stack_warped' vrt_compute(   x,   outfile,   t_srs = x$srs,   te = x$bbox,   tr = x$res,   resampling = c(\"near\", \"bilinear\", \"cubic\", \"cubicspline\", \"lanczos\", \"average\", \"rms\",     \"mode\", \"max\", \"min\", \"med\", \"q1\", \"q3\", \"sum\"),   engine = c(\"warp\", \"gdalraster\", \"translate\"),   warp_options = gdalwarp_options(),   creation_options = gdal_creation_options(),   config_options = gdal_config_opts(),   nsplits = 1L,   add_cl_arg = NULL,   quiet = TRUE )  # S3 method for class 'vrt_stack' vrt_compute(   x,   outfile,   t_srs,   te,   tr,   resampling = c(\"near\", \"bilinear\", \"cubic\", \"cubicspline\", \"lanczos\", \"average\", \"rms\",     \"mode\", \"max\", \"min\", \"med\", \"q1\", \"q3\", \"sum\"),   engine = c(\"warp\", \"gdalraster\", \"translate\"),   warp_options = gdalwarp_options(),   creation_options = gdal_creation_options(),   config_options = gdal_config_opts(),   nsplits = 1L,   add_cl_arg = NULL,   quiet = TRUE )  # S3 method for class 'vrt_collection_warped' vrt_compute(   x,   outfile,   t_srs = x$srs,   te = x$bbox,   tr = x$res,   resampling = c(\"near\", \"bilinear\", \"cubic\", \"cubicspline\", \"lanczos\", \"average\", \"rms\",     \"mode\", \"max\", \"min\", \"med\", \"q1\", \"q3\", \"sum\"),   engine = c(\"warp\", \"gdalraster\", \"translate\"),   warp_options = gdalwarp_options(),   creation_options = gdal_creation_options(),   config_options = gdal_config_opts(),   nsplits = 1L,   add_cl_arg = NULL,   quiet = FALSE )  # S3 method for class 'vrt_collection' vrt_compute(   x,   outfile,   t_srs,   te,   tr,   resampling = c(\"near\", \"bilinear\", \"cubic\", \"cubicspline\", \"lanczos\", \"average\", \"rms\",     \"mode\", \"max\", \"min\", \"med\", \"q1\", \"q3\", \"sum\"),   engine = c(\"warp\", \"gdalraster\", \"translate\"),   warp_options = gdalwarp_options(),   creation_options = gdal_creation_options(),   config_options = gdal_config_opts(),   nsplits = 1L,   add_cl_arg = NULL,   quiet = FALSE )"},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_compute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a composite raster from (virtual) raster sources. — vrt_compute","text":"x vrt_block, vrt_stack, vrt_collection object outfile character string output file path t_srs character string target SRS te numeric vector target extent form c(xmin, ymin, xmax, ymax) must SRS t_srs. tr numeric vector target resolution form c(xres, yres) resampling character vector resampling method used. see details. engine character vector engine use processing raster data. See details. warp_options character vector options pass gdalwarp creation_options character vector options pass gdal \"engine\". config_options character vector options set GDAL environment nsplits integer number splits use using gdalraster engine. add_cl_arg character vector additional command line arguments captured gdalwarp_options() - checked validity. quiet logical indicating whether suppress output","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_compute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a composite raster from (virtual) raster sources. — vrt_compute","text":"character string path output raster","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_compute.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a composite raster from (virtual) raster sources. — vrt_compute","text":"resampling default \"near\", chosen vrt_warp already used \"bilinear\" may prefereable input data yet virtually aligned/resampled. choice engine depend nature computation carried . majority cases warping preferred, especically processing entirity input dataset (usually case working online data sources).","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_maskfuns.html","id":null,"dir":"Reference","previous_headings":"","what":"Masking functions for pixel-based processing — set_mask_numpy","title":"Masking functions for pixel-based processing — set_mask_numpy","text":"Masking functions pixel-based processing","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_maskfuns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Masking functions for pixel-based processing — set_mask_numpy","text":"","code":"set_mask_numpy()  build_intmask()  build_bitmask()"},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_maskfuns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Masking functions for pixel-based processing — set_mask_numpy","text":"function simple bit mask function can used mask pixels based bit mask. bitwise transformation applied provided valid_bits. build_intmask provides integer mask function can used mask pixels based bit mask. bitwise transformation applied provided valid_bits. build_bitmask provides simple bit-wise mask function can used mask pixels based bit mask. valid_bits used determine bits mask .","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_save.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a vrt_block object to disk — vrt_save","title":"Save a vrt_block object to disk — vrt_save","text":"Save vrt_block object disk","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_save.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a vrt_block object to disk — vrt_save","text":"","code":"vrt_save(x, outfile)"},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_save.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a vrt_block object to disk — vrt_save","text":"x vrt_stack vrt_block object. outfile character string output file","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_set_band_names.html","id":null,"dir":"Reference","previous_headings":"","what":"set the band names for a vrt_x object — vrt_set_band_names","title":"set the band names for a vrt_x object — vrt_set_band_names","text":"set band names vrt_x object","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_set_band_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"set the band names for a vrt_x object — vrt_set_band_names","text":"","code":"vrt_set_band_names(x, band_names)"},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_set_band_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"set the band names for a vrt_x object — vrt_set_band_names","text":"x vrt_block, vrt_stack, vrt_collection object band_names character vector band names","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_set_maskfun.html","id":null,"dir":"Reference","previous_headings":"","what":"Set mask band of a VRT collection — vrt_set_maskfun","title":"Set mask band of a VRT collection — vrt_set_maskfun","text":"Set mask band VRT collection","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_set_maskfun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set mask band of a VRT collection — vrt_set_maskfun","text":"","code":"vrt_set_maskfun(   x,   mask_band,   mask_values,   build_mask_pixfun,   set_mask_pixfun,   drop_mask_band,   cache_dir )  # S3 method for class 'vrt_block' vrt_set_maskfun(   x,   mask_band,   mask_values,   build_mask_pixfun = vrtility::build_intmask(),   set_mask_pixfun = vrtility::set_mask_numpy(),   drop_mask_band = TRUE,   cache_dir = getOption(\"vrt.cache\") )  # S3 method for class 'vrt_collection' vrt_set_maskfun(   x,   mask_band,   mask_values,   build_mask_pixfun = vrtility::build_intmask(),   set_mask_pixfun = vrtility::set_mask_numpy(),   drop_mask_band = TRUE,   cache_dir = getOption(\"vrt.cache\") )"},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_set_maskfun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set mask band of a VRT collection — vrt_set_maskfun","text":"x VRT collection mask_band name mask band mask_values numeric vector integer bit values masked. build_mask_pixfun character string Python code build mask. Provided functions include build_intmask() build_bitmask(). See details. set_mask_pixfun character string Python code set mask. Provided functions include set_mask_numpy(). See details. drop_mask_band Logical. TRUE, mask band removed VRT block. cache_dir character string directory use temporary files. general left alone. main purpose manage cache location running asyncronously mirai.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_set_maskfun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set mask band of a VRT collection — vrt_set_maskfun","text":"VRT block mask band set. VRT collection mask band set.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_set_maskfun.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set mask band of a VRT collection — vrt_set_maskfun","text":"build_mask_pixfun function used build mask band. mask band true bitmask bit-wise operations required, build_bitmask() function used. integer-based masking, mask band provided single band integer values, build_intmask() function used. set_mask_pixfun function used apply mask bands. general set_mask_numpy() used, although custom function can provided.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_set_pixelfun.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the pixel function of a VRT stack object — vrt_set_pixelfun","title":"Set the pixel function of a VRT stack object — vrt_set_pixelfun","text":"Set pixel function VRT stack object","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_set_pixelfun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the pixel function of a VRT stack object — vrt_set_pixelfun","text":"","code":"vrt_set_pixelfun(x, pixfun)  # S3 method for class 'vrt_stack' vrt_set_pixelfun(x, pixfun = vrtility::median_numpy())"},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_set_pixelfun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the pixel function of a VRT stack object — vrt_set_pixelfun","text":"x vrt_stack object pixfun function returns Python code pixel function","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_stack.html","id":null,"dir":"Reference","previous_headings":"","what":"Stack VRT files from a vrt_collection object — vrt_stack","title":"Stack VRT files from a vrt_collection object — vrt_stack","text":"Stack VRT files vrt_collection object Print vrt_block object","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_stack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stack VRT files from a vrt_collection object — vrt_stack","text":"","code":"vrt_stack(x, ...)  # S3 method for class 'vrt_collection' vrt_stack(x, quiet = TRUE, ...)  # S3 method for class 'vrt_stack' print(x, xml = FALSE, pixfun = FALSE, maskfun = FALSE, ...)"},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_stack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stack VRT files from a vrt_collection object — vrt_stack","text":"x vrt_collection object ... Additional arguments used quiet Logical. TRUE, suppress GDAL progress bar xml logical indicating whether print XML pixfun logical indicating whether print pixel function maskfun logical indicating whether print mask function","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_stack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stack VRT files from a vrt_collection object — vrt_stack","text":"vrt_stack object","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_stack.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stack VRT files from a vrt_collection object — vrt_stack","text":"function stacks VRT files vrt_collection object single VRT file containing multiple layers RasterBand. VRT files stacked order provided vrt_collection object. derived rstac object, order ordered date.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_tools.html","id":null,"dir":"Reference","previous_headings":"","what":"The official GDAL VRT XML schema A copy of the official VRT schema for vritility VRT validation. — vrt_xml_schema","title":"The official GDAL VRT XML schema A copy of the official VRT schema for vritility VRT validation. — vrt_xml_schema","text":"Loads copy official xml schema provided vrt_xml_schema dataset.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_tools.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The official GDAL VRT XML schema A copy of the official VRT schema for vritility VRT validation. — vrt_xml_schema","text":"","code":"vrt_xml_schema  vrt_schema(schema = vrtility::vrt_xml_schema)"},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_tools.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"The official GDAL VRT XML schema A copy of the official VRT schema for vritility VRT validation. — vrt_xml_schema","text":"character","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_tools.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"The official GDAL VRT XML schema A copy of the official VRT schema for vritility VRT validation. — vrt_xml_schema","text":"https://raw.githubusercontent.com/OSGeo/gdal/master/frmts/vrt/data/gdalvrt.xsd","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_tools.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The official GDAL VRT XML schema A copy of the official VRT schema for vritility VRT validation. — vrt_xml_schema","text":"schema character string xml schema - mainly intended use official gdal VRT schema.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_tools.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The official GDAL VRT XML schema A copy of the official VRT schema for vritility VRT validation. — vrt_xml_schema","text":"xml_document object","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_tools.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The official GDAL VRT XML schema A copy of the official VRT schema for vritility VRT validation. — vrt_xml_schema","text":"","code":"vrt_schema() #> {xml_document} #> <schema elementFormDefault=\"qualified\" version=\"1.0\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"> #>  [1] <xs:element name=\"VRTDataset\" type=\"VRTDatasetType\">\\n  <xs:annotation>\\ ... #>  [2] <xs:complexType name=\"VRTDatasetType\">\\n  <xs:sequence>\\n    <xs:choice  ... #>  [3] <xs:simpleType name=\"DatasetSubclassType\">\\n  <xs:restriction base=\"xs:s ... #>  [4] <xs:complexType name=\"OverviewListType\">\\n  <xs:simpleContent>\\n    <xs: ... #>  [5] <xs:simpleType name=\"integerList\">\\n  <xs:list itemType=\"xs:integer\"/>\\n ... #>  [6] <xs:complexType name=\"SRSType\">\\n  <xs:simpleContent>\\n    <xs:extension ... #>  [7] <xs:simpleType name=\"nonNegativeInteger32\">\\n  <xs:restriction base=\"xs: ... #>  [8] <xs:complexType name=\"GCPListType\">\\n  <xs:sequence>\\n    <xs:element na ... #>  [9] <xs:complexType name=\"GCPType\">\\n  <xs:attribute name=\"Id\" type=\"xs:stri ... #> [10] <xs:complexType name=\"MetadataType\">\\n  <xs:sequence>\\n    <!--<xs:choic ... #> [11] <xs:complexType name=\"GDALWarpOptionsType\">\\n  <xs:sequence>\\n    <xs:an ... #> [12] <xs:complexType name=\"PansharpeningOptionsType\">\\n  <xs:sequence>\\n    < ... #> [13] <xs:simpleType name=\"NoDataOrNoneType\">\\n  <xs:union memberTypes=\"xs:dou ... #> [14] <xs:complexType name=\"PanchroBandType\">\\n  <xs:sequence>\\n    <xs:elemen ... #> [15] <xs:complexType name=\"SpectralBandType\">\\n  <xs:sequence>\\n    <xs:eleme ... #> [16] <xs:complexType name=\"AlgorithmOptionsType\">\\n  <xs:sequence>\\n    <xs:a ... #> [17] <xs:complexType name=\"InputType\">\\n  <xs:sequence>\\n    <xs:choice minOc ... #> [18] <xs:complexType name=\"OutputBandsType\">\\n  <xs:sequence/>\\n  <xs:attribu ... #> [19] <xs:complexType name=\"ProcessingStepsType\">\\n  <xs:sequence minOccurs=\"1 ... #> [20] <xs:complexType name=\"ProcessingStepType\">\\n  <xs:annotation>\\n    <xs:d ... #> ..."},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_warp.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct A warped VRT or warped VRT collection. — vrt_warp","title":"Construct A warped VRT or warped VRT collection. — vrt_warp","text":"Construct warped VRT warped VRT collection.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_warp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct A warped VRT or warped VRT collection. — vrt_warp","text":"","code":"vrt_warp(x, t_srs, te, tr, resampling, quiet)  # S3 method for class 'vrt_block' vrt_warp(   x,   t_srs,   te,   tr,   resampling = c(\"bilinear\", \"near\", \"cubic\", \"cubicspline\", \"lanczos\", \"average\", \"rms\",     \"mode\", \"max\", \"min\", \"med\", \"q1\", \"q3\", \"sum\"),   quiet = TRUE )  # S3 method for class 'vrt_collection' vrt_warp(   x,   t_srs,   te,   tr,   resampling = c(\"bilinear\", \"near\", \"cubic\", \"cubicspline\", \"lanczos\", \"average\", \"rms\",     \"mode\", \"max\", \"min\", \"med\", \"q1\", \"q3\", \"sum\"),   quiet = TRUE )"},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_warp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct A warped VRT or warped VRT collection. — vrt_warp","text":"x vrt_collection vrt_block (likely former). t_srs character target SRS must numeric EPSG code, SRS like character proj4 string WKT. te numeric vector target extent form c(xmin, ymin, xmax, ymax) using SRS t_srs. tr numeric vector target resolution form c(xres, yres) resampling character vector resampling methods used band. default \"bilinear\". \"near\" sampling used mask_band provided. quiet logical indicating whether suppress progress bar.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrt_warp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct A warped VRT or warped VRT collection. — vrt_warp","text":"function generates warped VRT objects types. particularly useful want create vrt_stack input images span multiple spatial reference systems. situation, warping input data must align desired oputput grid.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrtility.html","id":null,"dir":"Reference","previous_headings":"","what":"vrtility: GDAL VRT utilities for R — vrtility","title":"vrtility: GDAL VRT utilities for R — vrtility","text":"vrtility package building raster (primarily remote sensing) processing pipelines. makes use GDAL's VRT (virtual raster format) capabilities efficient processing large raster datasets. package's primary focus  use GDAL VRT pixel functions. pixel functions (currently implemented python) used apply cloud masks summarise pixel values (e.g. median) multiple images (.e create composite image). hope add C++ expression based pixel functions time.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrtility.html","id":"spatial-helpers","dir":"Reference","previous_headings":"","what":"Spatial helpers","title":"vrtility: GDAL VRT utilities for R — vrtility","text":"bbox_to_projected Convert long/lat bounding box projected bounding box to_wkt Get wkt string numeric epsg code character proj4 string","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrtility.html","id":"stac-helpers","dir":"Reference","previous_headings":"","what":"STAC helpers","title":"vrtility: GDAL VRT utilities for R — vrtility","text":"stac_query Query STAC catalog sentinel2_stac_query Query STAC catalog Sentinel-2 data sign_planetary_computer Sign URL Planetary Computer","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrtility.html","id":"vrt-utilities","dir":"Reference","previous_headings":"","what":"VRT utilities","title":"vrtility: GDAL VRT utilities for R — vrtility","text":"vrt_collect Create vrt_collection object vrt_set_maskfun Set mask function vrt object vrt_stack Create vrt_stack object vrt_set_pixelfun Set pixel function vrt stack object vrt_warp Warp vrt_x object warped vrt vrt_compute Compute vrt pipeline (using GDAL)","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrtility.html","id":"vrt-pixel-functions","dir":"Reference","previous_headings":"","what":"VRT pixel functions","title":"vrtility: GDAL VRT utilities for R — vrtility","text":"vrt_set_pixelfun Set pixel function vrt stack object set_mask_numpy pixel function apply bitmask build_intmask pixel function build mask mask band mask values integers build_bitmask pixel function build mask mask band mask values bit positions median_numpy pixel function compute median","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrtility.html","id":"python-environment-helpers","dir":"Reference","previous_headings":"","what":"python environment helpers","title":"vrtility: GDAL VRT utilities for R — vrtility","text":"vrtility_py_require Require python package set_py_env_vals Set python environment variables options","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrtility.html","id":"vrt-helpers","dir":"Reference","previous_headings":"","what":"VRT helpers","title":"vrtility: GDAL VRT utilities for R — vrtility","text":"vrt_save Save VRT object file vrt_schema (data object)official GDAL VRT schema character object","code":""},{"path":[]},{"path":"https://permian-global-research.github.io/vrtility/reference/vrtility.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vrtility: GDAL VRT utilities for R — vrtility","text":"Maintainer: Hugh Graham hugh.graham@permianglobal.com (ORCID)","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrtility_python.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup the vrtility Python environment — vrtility_py_require","title":"Setup the vrtility Python environment — vrtility_py_require","text":"thin wrapper around reticulate::py_install function set necessary python environment set options required vrtility package. environment set_py_env_vals sets environment variables required vrtility package - typically required.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrtility_python.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup the vrtility Python environment — vrtility_py_require","text":"","code":"vrtility_py_require(   packages = NULL,   python_version = \">=3.9\",   ...,   exclude_newer = NULL,   action = c(\"add\", \"remove\", \"set\") )  set_py_env_vals()  compute_with_py_env(code)"},{"path":"https://permian-global-research.github.io/vrtility/reference/vrtility_python.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup the vrtility Python environment — vrtility_py_require","text":"packages character vector Python packages available session. can simple package names like \"jax\" names version constraints like \"jax[cpu]>=0.5\". Pip style syntax installing local files git repository also supported (see details). python_version character vector Python version constraints  (e.g., \"3.10\" \">=3.9,<3.13\"). ... Reserved future extensions; must empty. exclude_newer Limit package versions published specified date. offers lightweight alternative freezing package versions, helping guard Python package updates break workflow. Accepts strings formatted RFC 3339 timestamps (e.g., \"2006-12-02T02:07:43Z\") local dates format (e.g., \"2006-12-02\") system's configured time zone. exclude_newer set, set action can override . action Determines py_require() processes provided requirements. Options : \"add\" (default): Adds entries current set requirements. \"remove\": Removes exact matches requirements list. Requests remove nonexistent entries ignored. example, \"numpy==2.2.2\" list, passing \"numpy\" action=\"remove\" remove . \"set\": Clears existing requirements replaces provided ones. Packages Python version can set independently. code code execute","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrtility_python.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup the vrtility Python environment — vrtility_py_require","text":"Invisible","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrtility_python.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setup the vrtility Python environment — vrtility_py_require","text":"general function shouldnt required , example, wish use custom python pixel function uses python package installed default (currently numpy), can use function install package, making sure set action \"add\". set_py_env_vals required running reticulate::py_env non-standard way. general lot easier  use # vrtility_py_require automatically set necessary options.","code":""},{"path":"https://permian-global-research.github.io/vrtility/reference/vrtility_python.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setup the vrtility Python environment — vrtility_py_require","text":"","code":"compute_with_py_env(print(\"Hello World\")) #> [1] \"Hello World\""}]
